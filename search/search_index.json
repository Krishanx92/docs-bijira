{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"administer/inviting-members/","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access the resources of that organization.</p>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/","title":"Configure Asgardeo as an External Identity Provider (IdP)","text":"<p>Asgardeo is an identity-as-a-service (IDaaS) solution designed to create seamless login experiences for your applications. Asgardeo seamlessly integrates with Bijira, providing powerful API access control through the use of API scopes. This enables restricting API access to designated user groups. By configuring Asgardeo as an external IdP in Bijira, you can leverage your Asgardeo user stores to manage API access control effectively. This guide walks you through the steps to set up Asgardeo as your external IdP.</p>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#prerequisites","title":"Prerequisites","text":"<p>Before you proceed, be sure to complete the following:</p> <ul> <li> <p>Create an Asgardeo application. You can follow the Asgardeo guide to register a standard-based application.</p> </li> <li> <p>Find the well-known URL:   Go to the info tab of the Asgardeo application to view the endpoints and copy the Discovery endpoint.</p> </li> <li> <p>Find the Client ID:   Go to the Protocol tab of the Asgardeo application and copy the Client ID.</p> </li> </ul>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#step-1-add-asgardeo-as-an-external-idp-in-bijira","title":"Step 1: Add Asgardeo as an external IdP in Bijira","text":"<p>Follow the steps below to add Asgardeo as an external IdP in Bijira:</p> <ol> <li>Sign in to the Bijira Console at https://console.bijira.dev/.</li> <li>In the left navigation menu, click Admin and then click Settings.</li> <li>In the header, click the Organization list. This opens the organization-level settings page. </li> <li>Click the Application Security tab and then click the Identity Providers tab.</li> <li>To add an identity provider, click + Identity Provider.</li> <li>Click Asgardeo. </li> <li>In the Asgardeo dialog that opens, specify a name and a description for the IdP. </li> <li>In the Well-Known URL field, paste the well-known URL that you copied from your Asgardeo instance by following the prerequisites. </li> <li> <p>Leave the Apply to all environments checkbox selected. This allows you to use the tokens generated via this IdP to invoke APIs across all environments.</p> </li> <li> <p>Click Next. This displays the server endpoints that are useful to implement and configure authentication for your application.</p> </li> <li>Click Add. </li> </ol> <p>Now you have configured Asgardeo as an external IdP in Bijira.</p>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#step-2-add-asgardeo-as-an-external-idp-in-bijira-developer-portal","title":"Step 2: Add Asgardeo as an external IdP in Bijira Developer Portal","text":"<p>Once the Asgardeo is configured as an external IdP in Bijira, it is necessary to configure it in the Bijira Developer Portal as well. For that, follow the steps below.</p> <ol> <li>In the left navigation menu of the Bijira Console, click Admin and then click Settings.</li> <li>Click the Developer Portal tab, then click the Identity Providers tab. This page will list all the Identity providers available in Bijira.</li> <li>Select the Identity Provider you configured at Step 1.</li> <li>Click Save.</li> </ol> <p>Now you have configured Asgardeo as an external IdP in Bijira Developer Portal as well.</p>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#what-next","title":"What Next?","text":"<p>To secure API access with the above-configured Asgardeo Identity Provider follow the steps mentioned here.</p>"},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/","title":"Configure a Custom Domain for Your Organization","text":"<p>A custom domain is essential for effective branding, discoverability, and credibility of a website. Bijira allows you to easily configure custom domains for your organization, enabling developers to utilize it to configure custom URLs for their API proxies.</p> <p>This section provides an overview of Bijira's custom domain configuration model and guides you through configuring a custom domain for your organization. It also walks you through utilizing a custom domain to configure a custom URL for a component.</p>"},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/#bijira-custom-domain-configuration-model","title":"Bijira custom domain configuration model","text":"<p>Bijira allows organization administrators to add custom domains for their organizations. When an administrator adds custom domains to an organization, developers can utilize the custom domains for their respective components.</p>"},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization","title":"Configure a custom domain for an organization","text":""},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/#add-a-custom-domain","title":"Add a custom domain","text":"<p>To add a custom domain for your organization, follow the steps given below:</p> <p>Note</p> <p>To add a custom domain, you must have organization administrator privileges.</p> <ol> <li>Sign in to the Bijira Console.</li> <li>In the Bijira Console header, click the Organization list.</li> <li>In the left navigation menu, under Admin, click Settings. This opens the organization-level settings page.</li> <li>Click the URL Settings tab and then click the Active Domains tab.</li> <li>Click + Add Domains.</li> <li> <p>In the Add a Custom Domain pane, do the following:</p> <ol> <li>Enter your domain name.</li> <li>Select the environment to apply the domain name.</li> <li> <p>Select the entity type to apply the domain name.</p> <p>Tip</p> <p>In this context:</p> <pre><code>- The **API** entity type represents Bijira API Proxies exposed via an endpoint.\n</code></pre> </li> </ol> </li> <li> <p>Take a look at the generated CNAME target value displayed and create a DNS record associating the domain name to the CNAME target value with your DNS provider.</p> <p></p> </li> <li> <p>Once the CNAME type DNS record is created, click Verify.</p> <p>Note</p> <p>If the CNAME mapping is correct, the verification completes successfully. It can take some time for the configured CNAME mapping to be globally available.</p> </li> <li> <p>On successful verification of the custom domain, click Next.</p> </li> <li>Select a TLS certificate provider depending on your preference. You can either import the TLS certificates you created for the custom domain or click Let's Encrypt to allow Bijira to generate and manage the certificates for you.</li> </ol> <p>If you want to import your own certificate, it should adhere to specific guidelines<ul> <li>TLS certificate guidelines:<ul> <li>It should be issued by a certificate authority (CA) and should contain the domain's public key along with additional information such as the domain name, the company that owns the domain, the certificate's expiration date, and the digital signature of the issuing CA.</li> <li>It should be an X509 certificate.</li> <li>It should be in the PEM format.</li> <li>It should be issued directly or through a wildcard entry for the provided custom URL. For example,<ul> <li>For direct issuance, the SSL file must include the exact domain name. For example, if the domain is <code>apis.choreo.dev</code>, the SSL file must include <code>apis.choreo.com</code>.</li> <li>For wildcard entries, the SSL file should use a wildcard notation to cover all subdomains under the provided URL. For example, if the CNAME is <code>apis.choreo.dev</code>, the SSL file should use <code>*.choreo.dev</code>.</li> </ul> </li> </ul> </li> <li>TLS key file guidelines:<ul> <li>It should be in the PEM format.</li> <li>It must be encrypted using RSA encryption.</li> </ul> </li> <li>Certificate chain file guidelines:<ul> <li>The chain file, which is essential for some clients to verify the authenticity of a server's SSL/TLS certificate, should contain your domain's SSL/TLS certificate (optional, as this can be provided via the certificate itself) and one or more intermediate certificates in the correct order, leading back to a root certificate. </li> <li>All certificates in the chain should be X509 certificates in PEM format.    For step-by-step instructions on constructing a certificate chain with a root certificate, click here    To construct a certificate chain with a root certificate, you must organize and combine the certificates in the correct sequence. A typical certificate chain consists of the following:<ul> <li>Root certificate: The trusted self-signed certificate issued by the certificate authority (CA).</li> <li>Intermediate certificates (if any): Certificates issued by the root CA to subordinate CAs.</li> <li>Leaf certificate: Your end-entity certificate issued by the CA. This is an optional certificate that may be included within the chain or provided separately. Follow these steps to construct the certificate chain:<ol> <li>Obtain and organize your certificates in the correct order:<ul> <li>Leaf certificate: The public certificate issued by the CA. This is optional and may be included within the chain or provided separately.</li> <li>Intermediate certificates: Obtain these from the CA, if applicable.</li> <li>Root certificate: Obtain this from the CA.  If it is self-signed, it serves as the trust anchor.</li> </ul> </li> <li>Combine the certificates into a single file in the following order:<ul> <li>Leaf certificate: This is your public certificate issued by the CA.</li> <li>Intermediate certificates if applicable: Include these in the correct hierarchical order.</li> <li>Root certificate: Include this at the end of the file. Use a text editor or a command-line tool to concatenate the certificates into one file, ensuring each certificate begins and ends with the proper markers. Also make sure the <code>BEGIN CERTIFICATE</code> and <code>END CERTIFICATE</code> markers appear on a new line: <pre><code> -----BEGIN CERTIFICATE-----\n &lt;Leaf Certificate Content&gt;\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n &lt;Intermediate Certificate Content&gt;\n -----END CERTIFICATE-----\n -----BEGIN CERTIFICATE-----\n &lt;Root Certificate Content&gt;\n -----END CERTIFICATE-----\n</code></pre></li> </ul> </li> <li>Save the concatenated file. You can save it with a name such as <code>certificate_chain.pem</code>.</li> <li>Use the following command to verify that your certificate chain is constructed correctly: <pre><code>openssl verify -CAfile &lt;root_or_bundle_cert&gt;.pem certificate_chain.pem\n</code></pre> Replace <code>&lt;root_or_bundle_cert&gt;.pem</code> with the path to your root certificate or a bundle containing both the root and intermediate certificates.</li> <li>Once the certificate chain is verified, upload it via the Bijira Console:     <ul> <li>If the constructed chain includes the leaf certificate, follow these steps:<ul> <li>Upload the constructed certificate chain in the TLS Certificate field.</li> <li>Upload the private key file in the TLS Key File field.</li> <li>Do not upload a certificate chain file, as it is already included in the TLS certificate.</li> </ul> </li> <li>If the constructed chain does not include the leaf certificate, follow these steps:<ul> <li>Upload the leaf certificate in the TLS Certificate field.</li> <li>Upload the private key file in the TLS Key File field.</li> <li>Upload the constructed certificate chain in the Certificate Chain File field.</li> </ul> </li> </ul> </li> </ol> </li> </ul> <p>To proceed with this step in this guide, click Let's Encrypt.</p> <ol> <li>To save the custom domain, click Add.</li> </ol> <p>Now, you have successfully added a custom domain for your organization.</p> <p>You can see the added custom domain listed in the Active Domains tab under the URL Settings tab.</p> <p></p> <p>The custom domain you added will be available to the entity types in the specified environment. You can use the custom domain when configuring a custom URL for a component.</p> <p>If you want to view the entity types that use a particular custom domain, click the specific custom domain listed in the Active Domains tab under URL Settings.</p>"},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component","title":"Configure a custom URL for a component","text":"<p>When an organization administrator adds custom domains for specific environments, developers can use any available custom domain to configure a custom URL for a component in a specific environment.</p>"},{"location":"administer/settings/configure-a-custom-domain-for-your-organization/#add-a-custom-url-to-a-component","title":"Add a custom URL to a component","text":"<p>To add a custom URL for your component, follow the steps given below:</p> <p>Note</p> <p>Before you add a custom domain for a specific environment, ensure that the component is deployed to that environment.</p> <ol> <li>Sign in to the Bijira Console.</li> <li>In the Project Overview pane, click on the API Proxy for which you want to customize the URL.</li> <li>In the left navigation menu, under Admin click Settings. This opens the component-level settings page.</li> <li>Click the URL Settings tab. This displays the active deployments of the component across different environments and indicates whether a custom URL is configured. If an active custom domain is available to configure a custom URL for a component in a specific environment, the Edit URL Mapping icon in the corresponding Action column becomes enabled.</li> </ol> <p></p> <ol> <li>To configure a custom URL for a component in a specific environment, click the Edit URL Mapping icon under the Action column corresponding to the respective environment. This opens the URL Settings dialog, where you can specify values to add to a custom URL.</li> </ol> <p></p> <ol> <li> <p>In the URL Settings dialog, select a domain to configure a custom URL.</p> <p>Tip</p> <ul> <li>The Domain drop-down lists the available domains for the component. You can  add any listed domain.</li> <li>If you want to add a custom URL for an API, you must specify an appropriate context path in the Path field. The Path field displays the default context path for the API. You can edit the path depending on your preference. </li> </ul> </li> <li> <p>Click Deploy. This creates the custom URL mapping, which you can see under the URL Settings tab. The custom URL will be in the Approved state.</p> </li> </ol> <p></p> <p>Once deployed, both the custom URL and the default URL can be used to access the component.</p> <p></p> <p>Now you have successfully utilized the configured custom domain to set up a custom URL for a component.</p>"},{"location":"administer/settings/create-api-subscription-plans/","title":"Create API Subscription Plans","text":"<p>API subscription plans are essential to control and manage access to APIs. These plans define the rules and limitations on how clients can interact with APIs, ensuring efficient resource utilization and robust security. With the option to set rate limits and burst control, subscription plans allow API providers to manage traffic, prevent misuse, and offer tiered service levels. Organizations can implement subscription plans to provide varying levels of API access, accommodating different user needs and business models, while ensuring optimal performance and security.</p> <p>In Bijira, users with the administrator role can create, update, and delete subscription plans at the organization level.</p> <p>Tip</p> <p>Deleting a subscription plan is only possible if there are no active subscriptions associated with it.  </p> <p>To create an organization-level subscription plan, follow the steps given below:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>In the Bijira Console header, go to the Organization list and select your organization.</li> <li>In the left navigation menu, click Admin and then click Settings. This opens the organization-level settings page.</li> <li>Click Subscription Plans tab (Here you can see the already available Subscription Plans).</li> <li>Click + Create.</li> <li> <p>In the Create Subscription Plan pane, enter the appropriate values for each field:</p> <p>Note</p> <ul> <li>In the Name field, you must specify a name to uniquely identify the subscription plan in various contexts. The value is editable only at the time you create the subscription plan. You cannot change the name after you create it.</li> <li>The Stop on Quota Reach checkbox is selected by default when creating a subscription plan. When selected, requests return an HTTP 429 response if the request count exceeds the limit. If you clear the checkbox, requests are allowed even if the quota is exceeded.</li> <li>Burst control protects your backend from sudden request spikes and manages API usage. It\u2019s especially useful for subscription plans where the request count is enforced over a long period, to prevent consumers from using their entire quota too quickly. Ensure you select the Burst Control checkbox when the Request Count Time Unit is selected as Hour or Day.</li> <li>Select the Approval required checkbox if subscription requests made to this plan require administrator or API publisher approval to activate the plan. This allows for manual review and approval of a subscription before granting API access.</li> </ul> <p></p> </li> <li> <p>Click Create. This creates the subscription plan and lists it under Subscription Plans.</p> <p> After creating subscription plans, users with the API publisher role can assign subscription plans to APIs. API consumers can then choose the appropriate subscription plan during the subscription process depending on their requirements.</p> </li> </ol>"},{"location":"bijira-concepts/data-planes/","title":"Data Planes","text":"<p>Bijira's architecture comprises two key components: the control plane and the data plane. The control plane handles essential tasks such as administering organizations, users, and projects. In addition, it also governs the entire journey of application development, from the initial stages of creation, progressing  to deployment, including measures to enforce governance and the provision for observability. The Bijira control plane is a SaaS that manages all cloud data planes and private data planes. It caters to diverse user personas, including CIOs, architects, and developers, as well as DevOps, site reliability engineers, and platform engineers.</p> <p>The data plane is the environment where user applications are deployed based on configurations set in the control plane. These applications can range from services and web applications to APIs, integrations, and scheduled tasks. The applications can be written in various programming languages, allowing for a polyglot approach. Importantly, all traffic related to the runtime of user applications is restricted to the Bijira data plane, ensuring strict containment of user data within its boundaries.</p> <p>Bijira's architecture features two distinct data plane types: cloud data planes and private data planes. A cloud data plane utilizes a multi-tenanted infrastructure model for deploying user applications, creating a shared yet secure environment for application runtime. In contrast, a private data plane(PDP) provides dedicated infrastructure for a single organization to run its user applications. This ensures an added layer of privacy and control for organizations with specific requirements.</p> <p></p>"},{"location":"bijira-concepts/data-planes/#private-data-planes","title":"Private data planes","text":""},{"location":"bijira-concepts/data-planes/#infrastructure","title":"Infrastructure","text":"<p>Bijira private data planes can be deployed with almost all major cloud providers, such as Azure, AWS, and GCP, and are also compatible with on-premises infrastructure.</p> <p>The essential requirements for a private data plane include upstream-compatible Kubernetes clusters, a container registry, a key vault (secret store), and a logging service or log storage.</p> <p></p>"},{"location":"bijira-concepts/data-planes/#system-components","title":"System components","text":"<p>Setting up the Bijira PDP system involves using a Helm installation on the Kubernetes infrastructure. The following software components are installed during the helm execution:</p> <ul> <li>Cilium CNI and service mesh.</li> <li>Bijira API Gateways and related components.</li> <li>Bijira PDP agent.</li> <li>Observability and logging APIs, along with observability agents.</li> <li>Flux controller.</li> </ul> <p>All of these software components receive automatic updates, including security patches and bug fixes through the flux controller connected to the Bijira Update Management System.</p>"},{"location":"bijira-concepts/data-planes/#connectivity-with-the-control-plane","title":"Connectivity with the control plane","text":"<p>The private data plane requires communication with the Bijira control plane to manage various activities. All these communications are outbound from the private data plane, ensuring that there is no need to open any specific <code>IP:Port</code> from its perspective for these interactions. However, if an organization's network restricts all outbound traffic, it is necessary to permit outbound traffic to the public IP range of the Bijira control plane.</p> <p>The following table outlines the inbound and outbound connections from a private data plane:</p> Data plane component Endpoint Direction Protocol Bijira PDP agent Bijira control plane (CP) (mizzen server) Outbound WSS Kubernetes API server Outbound (cluster internal) HTTPS, WS APIM/local adaptor Global adaptor Outbound HTTPS Azure Service Bus (CP) Outbound AMQP APIM/Enforcer Event hub (CP) Outbound AMQP Bijira secret resolver Cloud secret store Outbound (VPC internal) HTTPS Container registry Container registry (public) Inbound HTTPS Container registry Outbound (VPC internal) HTTPS Certificate manager Azure DNS service Outbound HTTPS LetsEncrypt Outbound HTTPS Flux source controller GitHub Outbound HTTPS Flux Helm controller Bijira container registry Outbound HTTPS <p>All communication between the control plane and the private data plane is secured using TLS.</p>"},{"location":"bijira-concepts/data-planes/#observability-architecture","title":"Observability architecture","text":"<p>The following diagram depicts the architecture overview of Bijira's in-data-plane log and observability in Azure PDP:</p> <p></p> <p>The private data plane observability architecture is centered around a strong commitment to data privacy and compliance. This is achieved through a strategic decision to retain logs and observability data within the data planes itself. Key aspects of this architecture include:</p> <ul> <li>Data storage at source: Logs and observability data are stored within the data plane itself, enhancing security, simplifying access, and ensuring compliance.</li> <li>Direct browser-to-data-plane interaction: The Bijira Console in the user's browser directly interacts with APIs in the data plane, reducing potential data routing complexities and ensuring a more secure, direct flow of information.</li> <li>Reduced data exposure points: Fetching data directly from the data plane's APIs minimizes the number of data transfer points, effectively decreasing the chances of data exposure or interception.</li> <li>Compliance with regulatory standards: The architecture supports data locality, aligning with global regulatory standards like GDPR and CCPA by keeping data in its original environment.</li> <li>Improved performance and real-time insights: Direct interaction between the browser and data plane results in faster data retrieval, providing users with immediate insights.</li> <li>User transparency and control: Users have a clear view of their data's location and access methods, alongside granular control over data access.</li> </ul>"},{"location":"bijira-concepts/data-planes/#security","title":"Security","text":"<p>The Bijira private data plane ensures extensive, production-grade security, ranging from infrastructure and architecture to zero-trust network security. All incoming traffic is protected by a firewall and must undergo authentication and authorization via the API Gateway. It also provides end-to-end network traffic encryption using Cilium transparent encryption, ensuring efficient data path encryption.</p>"},{"location":"bijira-concepts/data-planes/#management-models","title":"Management models","text":"<p>Bijira supports the following management models for private data planes (PDPs), fostering collaboration between WSO2 and customers across diverse scenarios:</p> <ul> <li>WSO2 fully managed (infrastructure and PDP in WSO2 subscription) model</li> <li>WSO2 fully managed (infrastructure and PDP in customer subscription) model</li> <li>Customer self-managed (WSO2 provides installation script and updates) model</li> </ul>"},{"location":"bijira-concepts/deployment-tracks/","title":"Deployment Tracks","text":"<p>Deployment Tracks in Bijira are structured pathways for simplified software component deployment. They act like advanced CI/CD pipelines, ensuring your components reach their destinations seamlessly, whether from source code or prebuilt images. They establish an organized and structured approach that minimizes the chances of errors and challenges that are typically associated with deployment workflows.</p>"},{"location":"bijira-concepts/deployment-tracks/#the-significance-of-deployment-tracks","title":"The significance of Deployment Tracks","text":"<p>Deployment Tracks offer practical solutions to enhance the API consumer experience by addressing two critical challenges:</p> <ul> <li> <p>Streamlined deployment: Deployment Tracks serve as well-designed routes for your software components, enhancing the organization and reliability of the deployment process, similar to a well-structured express route.</p> </li> <li> <p>Efficient API versioning: Especially beneficial for managed APIs, Deployment Tracks provide a straightforward method for creating API versions that seamlessly interact with previous iterations. This simplified version management benefits both API creators and consumers alike.</p> </li> </ul>"},{"location":"bijira-concepts/deployment-tracks/#streamlined-deployments","title":"Streamlined deployments","text":"<p>For streamlined deployments, Bijira dissects two integral approaches that leverage Deployment Tracks: the comprehensive CI/CD integration and the focused CD-Only strategy.</p>"},{"location":"bijira-concepts/deployment-tracks/#cicd-with-deployment-tracks","title":"CI/CD with Deployment Tracks","text":"<p>A deployment track is linked to a particular branch within a GitHub repository. This connection is useful for handling deployments to various environments. On Bijira's Deploy page, you can easily visualize the deployments to specific environments associated with your selected deployment track. Moreover, the deployment track has a functionality that initiates automatic deployments for the linked branch. When activated, merging a pull request (PR) triggers a deployment to the development environment.</p> <p></p>"},{"location":"bijira-concepts/deployment-tracks/#cd-only-strategy-with-deployment-tracks","title":"CD-Only strategy with Deployment Tracks","text":"<p>If you're inclined to use your own Continuous Integration (CI) systems and want to harness the deployment track as a Continuous Deployment (CD) pipeline, you can seamlessly link deployment tracks to a container registry repository. This configuration empowers users to effortlessly deploy images sourced directly from the linked container registry repository.</p> <p></p>"},{"location":"bijira-concepts/deployment-tracks/#efficient-api-versioning","title":"Efficient API versioning","text":"<p>This section applies to only service components. When working with service components in Bijira, it is important to have an effective API versioning mechanism. Bijira follows a versioning mechanism based on Semantic Versioning (SemVer) but only includes the major version and minor version with the prefix <code>v</code>.</p> <p>For example, <code>v1.2</code>.</p> <p>You can follow the approach given below when you version APIs in Bijira:</p> <ul> <li>Increment the major version when you make incompatible API changes.</li> <li>Increment the minor version when you add functionality in a backward-compatible manner.</li> </ul> <p>What is Semantic Versioning?</p> <p>Semantic Versioning (SemVer) is a specification that defines how to assign and increment version numbers for software products, including APIs. For more information, see Semantic Versioning specification.</p> <p>One of the primary concerns when dealing with SaaS APIs is to minimize disruption for API consumers while continuously developing and deploying updates.</p> <p>In compliance with SemVer, changes that don't introduce breaking or additive modifications to the API are categorized as patch updates. Hover, from the perspective of API consumers, these changes should ideally not disrupt their API clients. Typically, API consumers are most concerned with major API version alterations, but there might be instances where minor version changes are communicated to them.</p> <p>Therefore, in the context of deployment tracks, API developers only need to specify the major and minor versions being delivered from a particular deployment track. This information is treated as the API version attribute of a deployment track. If the publisher requires versioning for internal tracking purposes, this can be accomplished in Git through the use of Git tags, on GitHub with GitHub releases, and so forth.</p> <p></p>"},{"location":"bijira-concepts/organization/","title":"Organization","text":"<p>An organization in Bijira is a logical grouping of users and user resources. A first-time user must create an organization and be a member of it when signing in to Bijira. Users and resources in an organization cannot access resources in another organization unless an admin of the other organization invites them and adds them as a member of that organization. A user cannot create more than one organization.</p>"},{"location":"bijira-concepts/organization/#switch-organizations","title":"Switch organizations","text":"<p>If you are a member of more than one organization, you can switch from one organization to another when necessary. To do this, select the required organization from the Organization list in the Bijira Console header.</p>"},{"location":"bijira-concepts/organization/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access the resources of that organization.</p>"},{"location":"bijira-concepts/organization/#manage-user-permission","title":"Manage user permission","text":"<p>Bijira manages user permissions with groups and roles.</p>"},{"location":"bijira-concepts/organization/#groups","title":"Groups","text":"<p>A group in Bijira is a collection of users, each with one or more roles assigned to them. Users within a group inherit the permissions associated with the roles assigned to that group. For instance, if a user is added to the <code>API Publisher</code> group, they will automatically receive the <code>API Publisher</code> role.</p> <p>Bijira comes with predefined groups already configured with specific roles, as follows:</p> <ul> <li>API Publisher: A collection of users who have the API Publisher role.</li> <li>API Subscriber: A collection of users who have the API Subscriber role.</li> <li>Admin : A collection of users who have the Admin role.</li> <li>Billing Admin : A collection of users who have the Billing Admin role.</li> <li>Bijira DevOps : A collection of users who have the Bijira DevOps role.</li> <li>Developer : Users who develop, deploy, and manage cloud native applications at scale.</li> <li>External API Subscriber: A collection of users who have the External API Subscriber role.</li> </ul> <p>When creating a new group to invite members, be sure to assign a role to the group to ensure users have the required permissions.</p>"},{"location":"bijira-concepts/organization/#roles","title":"Roles","text":"<p>Bijira roles are defined as follows:</p> <ul> <li>API Publisher: An API publisher can discover, create, publish, delete, test, and manage an API.</li> <li>API Subscriber: An API subscriber is a developer in a particular organization. An API subscriber can subscribe to an application, manage subscriptions, manage applications, generate API keys, and manage API keys.</li> <li>Admin: An administrator is responsible for all administration tasks, including user management, customizing the Developer Portal, managing projects, enabling analytics, managing domains, etc.</li> <li>Billing Admin: Is responsible for billing administration that includes viewing tiers, creating and viewing organizations, managing invoices, viewing and creating subscriptions, and viewing and creating payment methods.</li> <li>Bijira DevOps: A Bijira DevOps user is a user with access to the Bijira DevOps portal, enabling them to actively manage, ensure dependable deployment, and monitor components.</li> <li>Developer : A user who can develop, deploy, and manage cloud native applications at scale.  </li> <li>External API subscriber: External API subscribers are API consumers who have access only to the API Developer Portal. They can join an organization with the sole purpose of consuming APIs.</li> <li>Environment Manager (Deprecated): Manages deployment environments.</li> </ul>"},{"location":"bijira-concepts/organization/#organization-id","title":"Organization ID","text":"<p>The Organization ID serves as a unique identifier for each organization. To get the organization ID, follow the steps below:</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, click Settings.</li> <li>In the header, click the Organization list. This will open the organization level settings page.</li> <li>Under Organization click Copy ID.</li> </ol>"},{"location":"bijira-concepts/organization/#organization-handle","title":"Organization Handle","text":"<p>The organization handle is a unique string that directly corresponds to your organization's name. To get the organization handle, follow the steps below:</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, click Settings.</li> <li>Under Organization click Copy Handle.</li> </ol>"},{"location":"bijira-concepts/project/","title":"Project","text":"<p>A project in Bijira is a logical group of related components that typically represent a single cloud native application. A project consists of one or more components. All components within a project can ideally be (but is not restricted to) in a single GitHub repository under different paths. This is also known as the monorepo architecture.</p> <p>At deployment time, all components within a given project are deployed into a single namespace of the Kubernetes cluster. Components within a project can be exposed to the public internet, internally to the rest of the organization, or privately within the project only. A project in Bijira is represented as a cell with regard to the Cell-based architecture. The following diagram illustrates a project and how the components within a project are laid out at runtime:</p> <p></p>"},{"location":"create-api-proxy/overview/","title":"Overview","text":"<p>Bijira API Manager allows you to create API proxies that can be used to secure, protect, and manage access to your APIs. You can create an API proxy by defining a set of policies and behaviors that control how the API proxy interacts with the backend service.</p> <p>An API proxy can be used to expose an existing API which is hosted in same organization or a third party API.</p> <p>Creating an API proxy for:</p> <ul> <li> <p>My APIs (Ingress APIs)</p> <p>An API Proxy can be created to front an existing ingress API in the following scenarios:</p> <ul> <li>Import API Contract</li> <li>Start with Endpoint</li> <li>Start from Scratch</li> <li>Create with GenAI</li> </ul> </li> <li> <p>Third Party APIs(Egress APIs)</p> <p>An API Proxy can be created to front an Endpoint or API which is managed by a third party in following scenarios:</p> <ul> <li>Get from Marketplace</li> <li>Import API Contract</li> <li>AI APIs</li> </ul> </li> </ul>"},{"location":"create-api-proxy/my-apis/create-with-genai/","title":"Create API with Generative AI","text":"<p>An API proxy acts as an intermediary between an existing API and Bijira, intercepting all requests made to the API.It also functions as a managed API, allowing you to apply essential API management features such as security policies and rate limiting.</p>"},{"location":"create-api-proxy/my-apis/create-with-genai/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"create-api-proxy/my-apis/create-with-genai/#create-an-api-proxy","title":"Create an API Proxy","text":"<p>In this guide, you will create an API proxy with AI.</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Select Create with GenAI.</li> <li>Click Create an E-Learning Platform API.</li> <li>Click Next.</li> <li>Add the Description as <code>Sample proxy for E-Learning Platform</code></li> <li>Click Create to create the API Proxy. Wait for the setup to complete.</li> </ol>"},{"location":"create-api-proxy/my-apis/create-with-genai/#configure-and-deploy-the-api-proxy","title":"Configure and Deploy the API Proxy","text":"<ol> <li>Navigate to the Deploy page of the API Proxy.</li> <li>Select Configure and Deploy option from the Deploy dropdown and click Configure and Deploy button.</li> <li>Select External as API Access Mode.</li> <li>Click Deploy.</li> </ol>"},{"location":"create-api-proxy/my-apis/create-with-genai/#test-the-api-proxy","title":"Test the API Proxy","text":"<ol> <li>Navigate to the Test \u2192 Console page of the API Proxy.</li> <li>Use the OpenAPI Console to test the API Proxy.</li> </ol>"},{"location":"create-api-proxy/my-apis/create-with-genai/#publish-the-api-proxy","title":"Publish the API proxy","text":"<ol> <li>In the left navigation menu, click Lifecycle under Develop. This takes you to the Lifecycle page.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol>"},{"location":"create-api-proxy/my-apis/import-api-contract/","title":"Import API Contract","text":"<p>An API proxy acts as an intermediary between an existing API and Bijira, intercepting all requests made to the API.It also functions as a managed API, allowing you to apply essential API management features such as security policies and rate limiting.</p> <p>In this guide, you will:</p> <ul> <li>Create an API proxy.</li> <li>Configure and Deploy the API proxy.</li> <li>Test the API proxy to verify its functionality.</li> </ul>"},{"location":"create-api-proxy/my-apis/import-api-contract/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"create-api-proxy/my-apis/import-api-contract/#create-an-api-proxy","title":"Create an API Proxy","text":"<p>In this guide, you will specify a URL to an OpenAPI definition of a sample API to create an API proxy.</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Select Import API Contract.</li> <li>Select URL option and provide the following URL to import the API contract from the GitHub repository:</li> </ol> <pre><code>https://raw.githubusercontent.com/wso2/bijira-samples/refs/heads/main/reading-list-api/open-api.yaml\n</code></pre> <ol> <li>Click Next and edit pre-defined values as needed. You can keep the default values for this sample.</li> <li>Click Create to create the API Proxy. Wait for the setup to complete.</li> </ol>"},{"location":"create-api-proxy/my-apis/import-api-contract/#configure-and-deploy-the-api-proxy","title":"Configure and Deploy the API Proxy","text":"<ol> <li>Navigate to the Deploy page of the API Proxy.</li> <li>Select Configure and Deploy option from the Deploy dropdown and click it.</li> <li>Select External as API Access Mode.</li> <li>Click Deploy.</li> </ol>"},{"location":"create-api-proxy/my-apis/import-api-contract/#test-the-api-proxy","title":"Test the API Proxy","text":"<ol> <li>Navigate to the Test \u2192 OpenAPI Console page of the API Proxy.</li> <li>Use the OpenAPI Console to test the API Proxy.</li> </ol>"},{"location":"create-api-proxy/my-apis/import-api-contract/#publish-the-api-proxy","title":"Publish the API proxy","text":"<ol> <li>In the left navigation menu, click Lifecycle under Develop. This takes you to the Lifecycle page.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API. If you want to change the display name, make the necessary changes and then click Confirm. This sets the API lifecycle state to Published.</li> </ol>"},{"location":"create-api-proxy/my-apis/import-api-contract/#api-proxy-behavior","title":"API Proxy Behavior","text":"<p>The Reading List API Proxy provides the following functionality:</p> <ul> <li>GET /books: Returns a list of pre-defined books with a warning that changes are not persisted.</li> <li>POST /books: Adds a new book to the reading list (without including <code>id</code> in the request body). Returns the created book along with a warning that changes are not persisted.</li> <li>PUT /books/{id}: Updates the status of an existing book. The request body only includes the <code>status</code> to update, and the <code>id</code> is passed in the URL. Returns the updated book with a warning.</li> <li>GET /books/{id}: Retrieves a book by its <code>id</code>. If the <code>id</code> does not exist, a 404 error is returned.</li> <li>DELETE /books/{id}: Deletes a book by its <code>id</code>.</li> </ul>"},{"location":"create-api-proxy/my-apis/start-from-scratch/","title":"Create API Proxy from Scratch","text":"<p>An API proxy acts as an intermediary between an existing API and Bijira, intercepting all requests made to the API.It also functions as a managed API, allowing you to apply essential API management features such as security policies and rate limiting.</p>"},{"location":"create-api-proxy/my-apis/start-from-scratch/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"create-api-proxy/my-apis/start-from-scratch/#create-an-api-proxy","title":"Create an API Proxy","text":"<p>In this guide, you will create an API proxy from the Scratch.</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Select Start from Scratch.</li> <li> <p>Specify the following values as API proxy details:</p> Field Value Name <code>Department Service</code> Identifier <code>department-service</code> Version <code>1.0</code> Base Path <code>/default/department-service/v1.0</code> Description <code>Sample proxy for department service</code> Target <code>https://samples.choreoapps.dev/company/hr</code> Access Mode <code>External</code> </li> <li> <p>Click Create to create the API Proxy. Wait for the setup to complete.</p> </li> </ol>"},{"location":"create-api-proxy/my-apis/start-from-scratch/#configure-and-deploy-the-api-proxy","title":"Configure and Deploy the API Proxy","text":"<ol> <li>Navigate to the Deploy page of the API Proxy.</li> <li>Select Configure and Deploy option from the Deploy dropdown and click Configure and Deploy button.</li> <li>Select External as API Access Mode.</li> <li>Click Deploy.</li> </ol>"},{"location":"create-api-proxy/my-apis/start-from-scratch/#test-the-api-proxy","title":"Test the API Proxy","text":"<ol> <li>Navigate to the Test \u2192 Console page of the API Proxy.</li> <li>Use the OpenAPI Console to test the API Proxy.</li> </ol>"},{"location":"create-api-proxy/my-apis/start-from-scratch/#publish-the-api-proxy","title":"Publish the API proxy","text":"<ol> <li>In the left navigation menu, click Lifecycle under Develop. This takes you to the Lifecycle page.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/","title":"Create API proxy from Start with Endpoint","text":"<p>An API proxy acts as an intermediary between an existing API and Bijira, intercepting all requests made to the API.It also functions as a managed API, allowing you to apply essential API management features such as security policies and rate limiting.</p>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/#create-an-api-proxy","title":"Create an API Proxy","text":"<p>In this guide, you will create an API proxy using an endpoint.</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Select Start with Endpoint.</li> <li>Provide the following URL as the Endpoint URL.</li> </ol> <pre><code>https://raw.githubusercontent.com/wso2/bijira-samples/refs/heads/main/reading-list-api/open-api.yaml\n</code></pre> <ol> <li>Click Next.</li> <li> <p>Specify the following values as API proxy details:</p> Field Value Name <code>Reading List API</code> Identifier <code>reading-list-api-uy</code> Version <code>1.0</code> Base Path <code>/default/reading-list-api-uy/v1.0</code> Description <code>This is a sample proxy that manages a list of reading items.</code> Access Mode <code>External</code> </li> <li> <p>Click Create to create the API Proxy. Wait for the setup to complete.</p> </li> </ol>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/#configure-and-deploy-the-api-proxy","title":"Configure and Deploy the API Proxy","text":"<ol> <li>Navigate to the Deploy page of the API Proxy.</li> <li>Select Configure and Deploy option from the Deploy dropdown and click Configure and Deploy button.</li> <li>Select External as API Access Mode.</li> <li>Click Deploy.</li> </ol>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/#test-the-api-proxy","title":"Test the API Proxy","text":"<ol> <li>Navigate to the Test \u2192 Console page of the API Proxy.</li> <li>Use the OpenAPI Console to test the API Proxy.</li> </ol>"},{"location":"create-api-proxy/my-apis/start-with-endpoint/#publish-the-api-proxy","title":"Publish the API proxy","text":"<ol> <li>In the left navigation menu, click Lifecycle under Develop. This takes you to the Lifecycle page.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol>"},{"location":"create-api-proxy/third-party-apis/ai-apis/","title":"Create an API Proxy for an AI API","text":"<p>AI APIs enable seamless integration of artificial intelligence services into applications using Bijira. By creating an AI API, users can connect with specific AI service providers that best suit their needs. Bijira offers built-in support for leading AI vendors, including OpenAI, Mistral, and Azure AI.  </p> <p>Follow the steps below to create an AI API:  </p>"},{"location":"create-api-proxy/third-party-apis/ai-apis/#1-access-the-bijira-console","title":"1. Access the Bijira Console","text":"<ol> <li>Sign in to the Bijira Console and select your project.  </li> </ol>"},{"location":"create-api-proxy/third-party-apis/ai-apis/#2-create-an-ai-api","title":"2. Create an AI API","text":"<ol> <li>Click +Create.</li> <li>Navigate to Create an API Proxy for Third-Party APIs (Egress) and click AI APIs.  </li> <li>On the Create AI API Proxy from Marketplace page, select the desired AI Provider.  </li> <li> <p>Configure the AI API details, such as:  </p> <ul> <li>API Name  </li> <li>Identifier  </li> <li>Version  </li> <li>AI Provider  </li> <li>Target Endpoint  </li> </ul> <p> </p> </li> <li> <p>Click Create to finalize the AI API creation.  </p> </li> </ol> <p>Once created, the overview page of the new API appears.  </p>"},{"location":"create-api-proxy/third-party-apis/ai-apis/#3-configure-backend-settings","title":"3. Configure Backend Settings","text":"<ol> <li>In the left navigation menu, click Develop, then select Policy.  </li> <li>Depending on the AI provider\u2019s requirements, configure Endpoint Configurations or set up an API-level mediation policy to handle authentication and authorization.  </li> </ol>"},{"location":"create-api-proxy/third-party-apis/ai-apis/#next-steps","title":"Next Steps","text":"<ul> <li>Test the AI API to ensure it correctly forwards requests to the AI service. See Test REST Endpoints via the OpenAPI Console.  </li> <li>Apply additional policies (e.g., rate limiting, security policies). See Policy Overview.  </li> <li>Publish the API for consumers to enable integration into applications. See Lifecycle Management.  </li> </ul> <p>By following these steps, you can efficiently integrate AI services into your Bijira environment and manage them with ease.  </p>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/","title":"Creating an API Proxy from Marketplace","text":"<p>Bijira provides built-in support for multiple well-known third-party APIs through the Bijira Marketplace. The marketplace contains API contracts for these third-party services, allowing you to create and publish API proxies effortlessly.</p>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#steps-to-create-an-api-proxy-from-the-marketplace","title":"Steps to Create an API Proxy from the Marketplace","text":"<p>Follow these steps to create an API proxy for a third-party API available in the Bijira Marketplace:</p>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#1-access-the-bijira-console","title":"1. Access the Bijira Console","text":"<ol> <li>Sign in to the Bijira Console and select your project.</li> </ol>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#2-select-a-third-party-api","title":"2. Select a Third-Party API","text":"<ol> <li>Click +Create.</li> <li>Navigate to Create an API Proxy for Third-Party APIs (Egress) and click Get From Marketplace.</li> <li>In the Create API Proxy from Marketplace page, browse or search for the desired third-party API.</li> <li>Select the API you want to integrate.</li> </ol>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#3-configure-api-proxy-details","title":"3. Configure API Proxy Details","text":"<ol> <li>Update the required API proxy details, such as:<ul> <li>API Name</li> <li>Identifier</li> <li>Version</li> <li>Target</li> </ul> </li> <li> <p>Review and confirm the configuration settings.</p> <p></p> </li> <li> <p>Click Create to finalize the API proxy creation.</p> </li> </ol> <p>Once created, the overview page of the new API proxy appears.</p>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#4-configure-backend-settings","title":"4. Configure Backend Settings","text":"<ol> <li>In the left navigation menu, click Develop, then select Policy.</li> <li>Depending on the third-party API requirements, configure Endpoint Configurations or set up an API-level mediation policy to handle authentication and authorization.</li> </ol> Example: Configuring the <code>Currency API</code> <p>To integrate the <code>Currency API</code>, follow these steps:</p> <ol> <li>In the Policy page, click Endpoint Configuration under Service Contract.</li> <li>Click Configure.</li> <li> <p>Enter the required authentication details:</p> <ul> <li>API Key Header</li> <li>API Key</li> </ul> </li> <li> <p>Click Save to apply the configuration.</p> </li> </ol> <p></p>"},{"location":"create-api-proxy/third-party-apis/get-from-marketplace/#next-steps","title":"Next Steps","text":"<ul> <li>Test the API proxy to ensure it correctly forwards requests to the third-party API. See Test REST Endpoints via the OpenAPI Console.</li> <li>Apply additional policies if needed (e.g., rate limiting, security policies). See Policy Overview.</li> <li>Publish the API for consumers.  See Lifecycle Management.</li> </ul> <p>By following these steps, you can seamlessly integrate third-party APIs into your Bijira environment and manage them efficiently.</p>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/","title":"Import a Third-Party API Contract","text":"<p>Bijira provides built-in support for multiple well-known third-party APIs through the Bijira Marketplace. However, if you need to create an API proxy for a third-party API that is not available in the Bijira Marketplace, you can do so by importing its API contract.  </p>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#steps-to-create-an-api-proxy-by-importing-an-api-contract","title":"Steps to Create an API Proxy by Importing an API Contract","text":"<p>Follow these steps to create an API proxy for a third-party API by importing its API contract:  </p>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#1-access-the-bijira-console","title":"1. Access the Bijira Console","text":"<ol> <li>Sign in to the Bijira Console and select your project.  </li> </ol>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#2-import-the-api-contract","title":"2. Import the API Contract","text":"<ol> <li>Click +Create.</li> <li>Navigate to Create an API Proxy for Third-Party APIs (Egress) and click Import API Contract.  </li> <li>On the Create API Proxy from Contract page, provide the API contract using one of the following methods:  <ul> <li>URL for the API contract  </li> <li>Upload an API contract file  </li> <li>Provide a GitHub repository URL  </li> <li>Import from SwaggerHub  </li> </ul> </li> <li>Click Next.</li> </ol>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#3-configure-api-proxy-details","title":"3. Configure API Proxy Details","text":"<ol> <li>Update the required API proxy details, including:  <ul> <li>API Name  </li> <li>Identifier  </li> <li>Version  </li> <li>Target  </li> </ul> </li> <li>Review and confirm the configuration settings.  </li> <li>Click Create to finalize the API proxy creation.  </li> </ol> <p>Once created, the overview page of the new API proxy appears.  </p>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#4-configure-backend-settings","title":"4. Configure Backend Settings","text":"<ol> <li>In the left navigation menu, click Develop, then select Policy.  </li> <li>Depending on the third-party API requirements, configure Endpoint Configurations or set up an API-level mediation policy to handle authentication and authorization.  </li> </ol>"},{"location":"create-api-proxy/third-party-apis/import-api-contract/#next-steps","title":"Next Steps","text":"<ul> <li>Test the API proxy to ensure it correctly forwards requests to the third-party API. See Test REST Endpoints via the OpenAPI Console.  </li> <li>Apply additional policies if needed (e.g., rate limiting, security policies). See Policy Overview.  </li> <li>Publish the API for consumers. See Lifecycle Management.  </li> </ul> <p>By following these steps, you can seamlessly integrate third-party APIs into your Bijira environment and manage them efficiently.  </p>"},{"location":"develop-api-proxy/documents/","title":"Documents","text":"<p>When an API consumer signs in to the Bijira Developer Portal to browse APIs, it is not sufficient to just have an API thumbnail along with the name and version of the API. An API consumer would expect to see more details about the API, such as the following:</p> <ul> <li>A brief description of the API.</li> <li>How to invoke the API.</li> <li>The limitations/restrictions of the API.</li> <li>Version history.</li> </ul> <p>To provide such information that improves the overall visibility of the API, an API developer can add such documentation to an API before publishing it to the Developer Portal.</p>"},{"location":"develop-api-proxy/documents/#add-documents-to-an-api","title":"Add Documents to an API","text":"<p>To add documentation for an API, follow the steps given below.</p> <ol> <li> <p>Sign in to the Bijira Console.</p> </li> <li> <p>Select the project and the API that you want to add documentation.</p> </li> <li> <p>In the left navigation menu, click Develop and then click Documents.</p> </li> <li> <p>Click Create Document.</p> </li> <li> <p>Specify document name and document type for the document and provide the content in markdown syntax.</p> </li> <li> <p>Click Create to save the document.</p> <p></p> </li> </ol> <p>Depending on the information you need to add to the API, you can add one or more documents.</p> <p>You can also edit existing documents and delete documents if necessary.</p>"},{"location":"develop-api-proxy/lifecycle-management/","title":"Lifecycle Management","text":"<p>API lifecycle management is an important aspect of API management. The API lifecycle consists of various states that an API passes through, from creation to retirement. In Bijira, there are six distinct lifecycle states: created, pre-released, published, blocked, deprecated, and retired.</p> <p>By leveraging the various lifecycle states, API managers can optimize the development process and ensure that subscribers have access to the latest and most reliable APIs.</p>"},{"location":"develop-api-proxy/lifecycle-management/#api-lifecycle-states","title":"API Lifecycle States","text":"<p>The following lifecycle states are applicable to APIs in Bijira:</p> API lifecycle state Use case Corresponding action CREATED The API is created but is not ready for consumption. The API is not visible to subscribers in the Developer Portal. PRE-RELEASED A prototype is created for early promotion and consumer testing. You can deploy a new API or a new version of an existing API as a prototype to provide subscribers with an early implementation of the API. The API is published to the Developer Portal as a pre-release. PUBLISHED The API is ready for subscribers to view and subscribe to via the Developer Portal The API is visible in the Developer Portal and is available for subscription. BLOCKED Access to the API is temporarily blocked. Runtime calls are blocked, and the API is not visible in the Developer Portal. DEPRECATED The old version of an API is moved to this state when a newer version of the API is PUBLISHED. The API is deployed and is available to existing subscribers. New subscriptions are disabled. Existing subscribers can continue to use it as usual until the API is retired. RETIRED The API is no longer in use when it is in this state. The API is unpublished and deleted from the Developer Portal."},{"location":"develop-api-proxy/lifecycle-management/#manage-the-lifecycle-of-an-api","title":"Manage the Lifecycle of an API","text":"<p>To change the lifecycle state of an API via the Bijira Console, follow the instructions given below:</p> <p>Tip</p> <p>You must have publishing privileges to manage the lifecycle states of a component.</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and the API that you want to change lifecycle.</li> <li>In the left navigation menu, click\u00a0Develop, and then click Lifecycle.</li> <li> <p>In the Lifecycle Management pane, you will see the lifecycle state transition diagram indicating the current lifecycle state of the component. Just above the lifecycle state transition diagram, The possible lifecycle states you can apply to the component are displayed just above the lifecycle state transition diagram. Click on a required lifecycle state to apply it to the component. For example, if a component is in the Created state, you can click either Pre-release or Publish.</p> <p></p> </li> </ol>"},{"location":"develop-api-proxy/subscription-plans/","title":"Assign Subscription Plans to APIs","text":"<p>API subscription plans allow API publishers to control and manage access to APIs. These plans define the rules and limitations on how clients can interact with APIs, ensuring efficient resource utilization and robust security.</p> <p>Bijira allows users with the administrator role to create, update, and delete subscription plans at the organization level. For instructions on creating subscription plans, see Create API Subscription Plans.</p> <p>Once created, Bijira allows API publishers to assign subscription plans to APIs, providing different levels of access based on user needs.</p> <p>To assign subscription plans to an API, follow the steps given below:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and the API which you want to assign subscription plans.</li> <li>In the left navigation menu, click Manage and then click Subscription Plans. This displays the subscription plans available for the component.</li> <li> <p>Enable the Subscription Plan Status toggle corresponding to the subscription plans you want to assign to the API.</p> <p></p> </li> <li> <p>Click Save.</p> </li> </ol> <p>When an API has subscription plans assigned to it, API consumers can select the plan that best fits their requirements during the subscription process.</p>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-asgardeo/","title":"Secure API Access with Asgardeo","text":"<p>API security refers to the measures and practices used to protect Application Programming Interfaces (APIs) from potential threats and vulnerabilities. APIs are essential for enabling communication and data exchange between different software applications and services, making them a critical component in modern software development. However, their openness and accessibility can also make them targets for various security risks. Authentication and authorization are key aspects of API security. Authentication is ensuring that only authorized users or applications can access the API. This can involve using API keys, tokens, or more advanced authentication methods like OAuth 2.0. Authorization is controlling what authenticated users or applications are allowed to do within the API. Authorization mechanisms restrict access to specific resources and actions based on user roles or permissions. </p> <p>Organizations using Asgardeo for identity and access management (IAM) can seamlessly integrate it with Bijira as an external Identity Provider (IdP). This guide will walk you through setting up Bijira to authenticate API invocations through Asgardeo which is configured as an external IdP.</p> <p>This guide walks you through the following steps:</p> <ul> <li>Create an API in Asgardeo.</li> <li>Create an application in Asgardeo and consume the Asgardeo API.</li> <li>Create an application in Bijira and enable external IdP authentication.</li> <li>Invoke the API.</li> </ul>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-asgardeo/#prerequisites","title":"Prerequisites","text":"<p>To follow this guide, you need to satisfy the following prerequisites:</p> <ul> <li>Configured Asgardeo as an external IdP </li> <li>If you don't already have an API Proxy in Bijira, create API Proxy.</li> <li>Deploy and publish your API. </li> </ul>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-asgardeo/#step-1-create-an-api-and-an-application-in-asgardeo","title":"Step 1: Create an API and an application in Asgardeo","text":"<p>Follow the Asgardeo API Authorization guide to create an application and an API in Asgardeo and to enable API authorization.</p> <p>Note</p> <ul> <li>Do the following under the protocol tab:<ul> <li>Select <code>JWT</code> as the Access Token.</li> <li>Select the appropriate grant types.</li> <li>Copy the client ID and client secret of the application for future reference.</li> </ul> </li> </ul>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-asgardeo/#step-2-create-an-application-in-bijira-and-enable-external-idp-authentication","title":"Step 2: Create an application in Bijira and enable external IdP authentication","text":"<p>Follow the steps below to consume the Bijira API and use an external IdP for authentication:</p> <ol> <li>Sign in to your organization in the Bijira Developer Portal at https://devportal.bijira.dev.</li> <li>Click Applications. and then click +Create.</li> <li>Enter a name for the application. </li> <li>Click Create.</li> <li>Click on the newly created application.</li> <li>At the top of the application page, under OAuth2 click + Add Client ID. </li> <li>Enter the Client ID you copied in step 2.</li> <li> <p>Click +Add.</p> <p>Note</p> <ul> <li>You can only use the Client ID in one application.</li> <li>This will be visible only to organizations where you have configured external IdPs. </li> </ul> </li> <li> <p>Once successfully added, you will be shown a dialog which contains the Identity provider connection data.</p> </li> <li>You can click on the Instructions to view instructions to generate an access token.</li> <li>Click Subscribe to more APIs button to explore the APIs and subscribe them through the application.</li> </ol>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-asgardeo/#step-3-invoke-the-bijira-api","title":"Step 3: Invoke the Bijira API","text":"<ol> <li>On the Bijira Developer Portal, go to your application. </li> <li>On the top of the page, under OAuth2, click View to see the Token Endpoint URL.</li> <li> <p>Obtain an access token by invoking the token endpoint as follows:</p> FormatExample <pre><code>curl -X POST &lt;TOKEN_ENDPOINT&gt; \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"grant_type=password\" \\\n-d \"username=&lt;USER_NAME&gt;\" \\\n-d \"password=&lt;USER_PASSWORD&gt;\" \\\n-d \"client_id=&lt;ASGARDEO_APP_CLIENT_ID&gt;\" \\\n-d \"client_secret=&lt;ASGARDEO_APP_CLIENT_SECRET&gt;\" \\\n-d \"scope=&lt;REQUIRED_SCOPES&gt;\"\n</code></pre> <pre><code>curl -X POST https://api.asgardeo.io/t/orghandle/oauth2/token \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-d \"grant_type=password\" \\\n-d \"username=&lt;USER_NAME&gt;\" \\\n-d \"password=&lt;USER_PASSWORD&gt;\" \\\n-d \"client_id=&lt;CLIENT_ID&gt;\" \\\n-d \"client_secret=&lt;CLIENT_SECRET&gt;\" \\\n-d \"scope=&lt;REQUIRED_SCOPES&gt;\"\n</code></pre> </li> <li> <p>Once you receive the access token, you can test invoking the resource using cURL in Bijira.</p> </li> </ol>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-bijira-sts/","title":"Secure API Access with Bijira STS","text":"<p>API security refers to the measures and practices used to protect Application Programming Interfaces (APIs) from potential threats and vulnerabilities. APIs are essential for enabling communication and data exchange between different software applications and services, making them a critical component in modern software development. However, their openness and accessibility can also make them targets for various security risks. Authentication and authorization are key aspects of API security. Authentication is ensuring that only authorized users or applications can access the API. This can involve using API keys, tokens, or more advanced authentication methods like OAuth 2.0. Authorization is controlling what authenticated users or applications are allowed to do within the API. Authorization mechanisms restrict access to specific resources and actions based on user roles or permissions. </p> <p>Bijira's built-in Secure Token Service (STS) can seamlessly integrate with Bijira APIs to provide authentication and authorization. This guide will walk you through setting up Bijira STS to authenticate API invocations.</p> <p>This guide walks you through the following steps:</p> <ul> <li>Create an application in Bijira and generate access token.</li> <li>Invoke the API.</li> </ul>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-bijira-sts/#prerequisites","title":"Prerequisites","text":"<p>To follow this guide, you need to satisfy the following prerequisites:</p> <ul> <li>If you don't already have an API Proxy in Bijira, create API Proxy.</li> <li>Deploy and publish your API. </li> </ul> <p>Note</p> <p>It is important to note that Bijira STS token can be only be used for client authentication. If you have a requirement for end user authentication, it is necessary to use external IdP such as Asgardeo. For more information about secure API access with Asgardeo, refer Secure API Access with Asgardeo.</p>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-bijira-sts/#step-1-create-an-application-and-enable-bijira-sts-authentication","title":"Step 1: Create an application and enable Bijira STS authentication","text":"<p>Follow the steps below to consume the Bijira API using Bijira STS.</p> <ol> <li>Sign in to your organization in the Bijira Developer Portal at https://devportal.bijira.dev.</li> <li>Click Applications. and then click +Create.</li> <li>Enter a name for the application. </li> <li>Click Create.</li> <li>Click on the newly created application.</li> <li>At the top of the application page, under OAuth2 click Generate. This will generate consumer keys for the application.</li> <li>Once successfully generated, you will be shown a dialog which contains the Identity provider connection data.</li> <li>Click on the Generate Token button to generate an access token. Please make sure to copy the access token to use in step 2.</li> <li>Click Subscribe to more APIs button to explore the APIs and subscribe them through the application.</li> </ol>"},{"location":"develop-api-proxy/authentication-and-authorization/secure-api-access-with-bijira-sts/#step-2-invoke-the-bijira-api","title":"Step 2: Invoke the Bijira API","text":"<ol> <li>Once you receive the access token, you can test invoking the resource using the OpenAPI console in Bijira.</li> </ol>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/","title":"Attach and Manage Policies","text":"<p>You can easily attach one or more policies to an API proxy component implementation via the Bijira Console. If necessary, you can also rearrange or swap the policies you attach.</p> <p>In Bijira, when you attach a mediation policy to a proxy, the deployment is a two-step process.</p> <ol> <li> <p>Deployment initiation:</p> <p>If the component to which you want to attach the mediation policy is new, the system creates and commits a new repository with the mediation service code based on the attached policy. This new service is called the mediation application.</p> </li> <li> <p>Deploying the API:</p> <p>Once the deployment initiation is complete, you can specify configuration values if any, and proceed to deploy. Bijira builds the generated mediation application and pushes the Docker image to the Docker registry. Finally, Bijira deploys the mediation application with the API Proxy.</p> </li> </ol> <p>When a mediation policy is attached to a specific flow, the API invocation undergoes the following behavioral modification:</p> <p></p> <ul> <li> <p>In the request path, the requests that pass through the gateway reach the relevant component, and Bijira executes any attached policies to the resource's request path before sending it to the backend.</p> </li> <li> <p>In the response path, the mediation component receives response messages from the backend, and Bijira executes any mediation policies attached to the <code>Response</code> flow or the <code>Error</code> flow. Then the response is forwarded to the client.</p> </li> <li> <p>If an error occurs during the execution of policies or due to an internal error, Bijira executes the <code>Error</code> flow and sends an error response to the client.</p> </li> </ul>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#attach-a-policy","title":"Attach a Policy","text":""},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#attach-an-api-level-policy","title":"Attach an API level Policy","text":"<p>To attach an API level policy to the <code>Request</code> flow of a REST API proxy, follow the steps given below:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and API to which you want to attach a policy.</li> <li>In the left navigation menu, click Develop, then click Policy.</li> <li>Click the Add API-level Policies button in the API Proxy Contract component.     </li> <li>In the API Policies pane, click Attach Mediation Policy to view the applicable mediation policy list.     </li> <li>In the Policy List pane that opens, click on a policy to view its details and configure its parameters. To make a parameter a configurable variable, input the value in the <code>${&lt;variableName&gt;}</code> format. For example, you can use <code>${name}</code> as an example.     </li> <li>Click Add to attach the policy. Then, click Save to apply the configuration to the API.  </li> </ol>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#attach-a-resource-level-policy","title":"Attach a Resource level Policy","text":"<p>To attach a resource level policy to the <code>Request</code>, <code>Response</code>, or <code>Error</code> flow of a REST API proxy, follow the steps given below:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and API to which you want to attach a policy.</li> <li>In the left navigation menu, click Develop, then click Policy.</li> <li>From the list of resources, click the Attach Policy Button for the required policy.     </li> <li>In the Edit Mediation Policies pane, click Attach Mediation Policy in the respective flow where you want to attach a policy. </li> <li>In the Policy List pane that opens, click on a policy to view its details.</li> <li>If the attached policy requires parameter configuration, on the policy pane enter the appropriate values and configure the parameters. To make a parameter a configurable variable, input the value in the <code>${&lt;variableName&gt;}</code> format. For example, you can use <code>${name}</code> as an example.     </li> <li>Click Add to attach the policy to the selected flow. Then, click Save to apply the configuration to the API resource.  </li> </ol> <p>Note</p> <p>After attaching an API Policy, it is necessary to deploy the API for the policy to become active within its corresponding flow.</p> <p>To deploy the API follow the steps below:</p> <ol> <li> <p>In the left navigation menu, click Deploy and then click Configure &amp; Deploy. Bijira performs the mediation application generation step and opens the Configure &amp; Deploy pane.      </p> </li> <li> <p>In the Configure &amp; Deploy pane, if you have any configurable variables that require values, specify appropriate values for them.</p> </li> <li> <p>Click Save &amp; Deploy.</p> </li> </ol>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#refresh-mediation-policies","title":"Refresh Mediation Policies","text":"<p>Bijira selectively generates and builds the mediation application code during component deployment depending on specific changes. These changes include:</p> <ul> <li>Addition, deletion, or modification of API resources.</li> <li>Attachment, removal, or editing of API mediation policies.</li> <li>Endpoint modifications via the Develop page.</li> <li>Initial configuration or removal of backend endpoints or mutual TLS certificates.</li> </ul> <p>If none of the above changes occur during deployment, Bijira skips the code generation and build process of the mediation application.</p> <p>Info</p> <ul> <li>If you want to enforce the code generation and build process of the mediation application in instances where the specified changes do not take place, you must turn on the Refresh Mediation Policies toggle when you configure and deploy the component.</li> <li>It is useful to enable Refresh Mediation Policies when you want to incorporate the latest Ballerina patches for your generated mediation application. However, this can result in longer deployment times.</li> </ul>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#implement-an-api-policy","title":"Implement an API policy","text":"<p>Bijira allows you to implement an API policy as a Ballerina project and attach it to an API proxy component. </p> <p>Info</p> <p>Supported Ballerina version: 2201.5.5 </p> <p>To implement a policy, follow the steps given below: </p>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#prerequisites","title":"Prerequisites","text":"<ol> <li>Set up  Ballerina 2201.5.5.</li> <li>Open the <code>~/.ballerina/settings.toml</code> file and ensure you have configured an access token to Ballerina Central. If you have not configured an access token, follow the steps given below to configure one: <ol> <li>Generate a token via https://central.ballerina.io/dashboard?tab=token.</li> <li>Download the generated <code>Settings.toml</code> file and copy it to your local <code>~/.ballerina</code> directory.</li> </ol> </li> </ol> <p>Alternatively, you can set the access token via the <code>BALLERINA_CENTRAL_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export BALLERINA_CENTRAL_ACCESS_TOKEN=&lt;access-token&gt; \n</code></pre>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#step-1-initialize-a-ballerina-project","title":"Step 1: Initialize a Ballerina project","text":"<p>Bijira provides a template to initialize a mediation policy project with all the required configurations. The mediation policy project will be created as a Ballerina project.</p> <p>To create a Ballerina project for the mediation policy using <code>mediation.template</code> as the project template, issue the following command:  </p> <p>Format:</p> <pre><code>    bal new -t choreo/mediation.template:1.0.0 &lt;policy-name&gt; \n</code></pre> <p>Example:</p> <p><pre><code>    bal new -t choreo/mediation.template:1.0.0 validateHeader \n</code></pre>  The Ballerina project that is created should have the following content: </p> <p></p> <p>Depending on your requirement, you can modify the <code>Ballerina.toml</code> and the <code>Package.md</code> files of the generated project. For example, you can update the org, package, package version, API documentation content, keywords, etc.</p> <p>Note</p> <p>To successfully publish to Ballerina Central, make sure you update the <code>org</code> value to your organization name.</p> <pre><code>     [package]\n        org = \"starkindustries\"\n        name = \"validateHeader\"\n        version = \"1.0.0\"\n        export = [\"validateHeader\"]\n        distribution = \"2201.5.5\"\n        keywords = [\"choreo-apim-mediation-policy\",\"choreo-apim-mediation-request-flow\",\"choreo-apim-mediation-response-flow\",\"choreo-apim-mediation-fault-flow\"]\n</code></pre>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#step-2-implement-the-policy","title":"Step 2: Implement the policy","text":"<p>In this step, you will implement the policy. </p> <p>Let's assume you want to implement a policy to validate an incoming header in the request and the response. </p> <ul> <li>Request path: If the request header is not present or if the validation fails, you want to log an error and return a <code>403 Bad Request</code> response to the client.</li> <li>Response path: You want to log a message to indicate whether the request is valid or not.</li> </ul> <p>To implement the policy, open the <code>policy.bal</code> file in the Ballerina project and update the generated policy stubs(i.e., request, response, or fault) appropriately. </p> <p>The following sections walk you through sample implementations for the Request and Response stubs:</p> Request flow <p>The following is a sample implementation for the request flow:</p> <pre><code>@mediation:RequestFlow\npublic function validateRequestHeader(mediation:Context ctx, http:Request req, string headerName, string headerValue) returns http:Response|false|error|() {\n   string|http:HeaderNotFoundError header = req.getHeader(headerName);\n   if (header is http:HeaderNotFoundError) {\n    string message = string `Header ${headerName} is not found`;\n    log:printError(message);\n    return generateResponse(message, http:STATUS_BAD_REQUEST);\n   }\n   if (header != headerValue) {\n    string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n    log:printError(validationFailedMessage);\n    return generateResponse(validationFailedMessage, http:STATUS_BAD_REQUEST);\n    }\n    log:printInfo(\"Header validation successful\");\n    return ();\n};\n\nfunction generateResponse(string message, int statusCode) returns http:Response {\n    http:Response response = new();\n    response.setTextPayload(message); \n    response.statusCode = statusCode;\n    return response;\n}\n</code></pre> Response flow <p>The following is a sample implementation for the response flow:</p> <pre><code>@mediation:ResponseFlow\npublic function validateResponseHeader(mediation:Context ctx, http:Request req, http:Response res, string headerName, string headerValue) returns http:Response|false|error|() { \n   string|http:HeaderNotFoundError header = res.getHeader(headerName);\n   if (header is http:HeaderNotFoundError) {\n    string message = string `Header ${headerName} is not found`;\n    log:printError(message);\n    return ();\n   }\n   if (header != headerValue) {\n    string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n    log:printError(validationFailedMessage);\n    return ();\n   }\n   return ();\n}\n</code></pre> Fault flow <p>In this guide, you are not going to make any changes to the <code>Fault</code> flow. Therefore, you can remove the <code>Fault</code> flow stub from the <code>policy.bal</code> file.</p> <p>Note</p> <p>The  @mediation:RequestFlow, @mediation:ResponseFlow, and @mediation:FaultFlow annotations are bound with the keywords in the <code>Ballerina.toml</code>. Therefore, the changes you make to the policy stubs should reflect in the <code>Ballerina.toml</code> file. For example, if the policy is applicable only on the request and response paths, you can remove the  @mediation:FaultFlow annotation from the policy. Then, you MUST also remove the choreo-apim-mediation-fault-flow keyword from the generated <code>Ballerina.toml</code> file. If you do not do so, the Ballerina compiler will show an error at compile time.</p> Publish as a private custom policy <p>Bijira supports publishing a policy as a private custom policy. Publishing a policy as a private custom policy makes the policy inaccessible outside of the organization. To publish a policy as a private custom policy, change the visibility to <code>private</code> prior to pushing the package to Ballerina Central as follows:</p> <ol> <li>Open the <code>Ballerina.toml</code> file of your policy. </li> <li> <p>Set the visibility to private by adding the configuration <code>visibility=\"private\"</code>. For example:</p> <pre><code>[package]\n   org = \"orgName\"\n   name = \"packageName\"\n   version = \"1.0.2\"\n   export = [\"packageName\"]\n   distribution = \"2201.5.5\"\n   keywords = [\"choreo-apim-mediation-policy\",\"choreo-apim-mediation-request-flow\",\"choreo-apim-mediation-response-flow\",\"choreo-apim-mediation-fault-flow\"]\n   visibility = \"private\"\n</code></pre> </li> <li> <p>Package and publish your policy to Ballerina Central.     </p> </li> </ol> Best practices <p>When implementing a policy, it is essential to follow best practices to ensure efficiency and maintainability. Here are some recommended best practices to follow:</p> <ul> <li>Organize the source code within the default module of the package. Do not add any additional modules.</li> <li>A policy implementation can contain any combination of flows. A generated project contains stubs for all three flows: <code>Request</code>, <code>Response</code>, and <code>Fault</code>. You can remove any stub that you do not require. For example, when you create a policy that re-writes the resource paths, you can remove the <code>Response</code> and <code>fault</code> stubs. </li> <li>The HTTP request/response objects and context record parameters gets passed as references to the policy functions. Therefore, the changes you make to these values persist throughout the policy execution and are propagated to subsequent policies. This behavior allows the request and response objects to accumulate transformations applied by attached policies.</li> <li>Familiarize yourself with the different return types of policy flows. The following return types are unmodifiable:<ul> <li>http:Response - Returns an HTTP response when you terminate the mediation flow prematurely. For example,  in the in-flow sequence, the mediation sequence terminates before calling the backend. The mediation policy then sends an HTTP response to the client.</li> <li>false - Returns <code>false</code> if you want to terminate the mediation sequence with a predefined response (on the Bijira side).</li> <li>error - Returns an error if you want to terminate the mediation flow and transfer control to the fault flow. The fault flow would then construct an error response and send it to the client.</li> <li>() - Returns () to signal the successful completion of the policy. Once the proxy has completed executing the policy, it starts to execute the next policy in the sequence.</li> </ul> </li> </ul>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#step-3-publish-the-policy","title":"Step 3: Publish the policy","text":"<p>Once you implement a policy, you must publish it to Ballerina Central. </p> <p>When you attach a policy and deploy an API, Bijira pulls the necessary packages from Ballerina Central and bundles them into the mediation application under the hood. Therefore to use policies in your APIs, you must publish them as public packages. </p> <p>To publish the policy, follow the steps given below:</p> <ol> <li>To package the policy before you publish it to Ballerina Central, issue the following command:     <pre><code>    bal pack \n</code></pre></li> <li> <p>To publish the package to Ballerina Central, issue the following command:</p> <pre><code>    bal push \n</code></pre> </li> </ol> <p>Once you publish the package, it will appear as follows in the policy list:</p> <p></p>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#write-unit-tests","title":"Write unit tests","text":"<p>You can write unit tests to test policy functions in a manner similar to how you write unit tests for a regular Ballerina function. </p> <p>The following is a sample unit test for the <code>validateRequestHeader</code> function:</p> <pre><code>import ballerina/http;\nimport choreo/mediation;\nimport ballerina/test;\n\n@test:Config {}\npublic function testRequestHeaderValidationFailure() {\n  http:Request req = new;\n  http:Response|false|error|() result = validateRequestHeader(createContext(\"get\", \"/test\"), req, \"testHeader\", \"test\");\n\n  if !(result is http:Response) {\n    test:assertFail(\"Expected http:Response, found \" + (typeof result).toString());\n  }\n\n  test:assertEquals(result.statusCode, http:STATUS_BAD_REQUEST, \"Status code mismatch\");\n}\n\nfunction createContext(string httpMethod, string resPath) returns mediation:Context {\n   mediation:ResourcePath originalPath = checkpanic mediation:createImmutableResourcePath(resPath);\n   mediation:Context originalCtx =\n               mediation:createImmutableMediationContext(httpMethod, originalPath.pathSegments(), {}, {});\n   mediation:ResourcePath mutableResPath = checkpanic mediation:createMutableResourcePath(resPath);\n   return mediation:createMutableMediationContext(originalCtx, mutableResPath.pathSegments(), {}, {});\n}\n</code></pre> <p>The policy function modifies the same request/response/context instance that you pass to it. You can check the request/response/context instance after calling the policy function to verify changes.</p>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#glossary","title":"Glossary","text":"<p>Here are some of the common terms used when working with policies in Bijira:</p> mediation:Context <p>The mediation context is used to pass parameters between policies. It is created per request and you can access it in any of the flows. For example, if a correlation ID needs to be set to the request, you can set it in the context of the request flow and access it in the response or fault flow. </p> <p>The mediation context can include the following functions:</p> <pre><code># Retrieves the value for the specified key.   \npublic function get(string name) returns anydata;\n\n# Stores the provided key-value pair. If a mapping exists for the key, the value is overwritten.\npublic function put(string name, anydata value);\n\n# Removes the entry mapped by the specified key and returns the removed value.\npublic function remove(string name) returns anydata;\n\n# Retrieves the value for the specified key. If there is no mapping for the key, return the specified\npublic function getOrDefault(string name, anydata default) returns anydata;\n\n# Checks whether a mapping exists for the specified key.\npublic function hasKey(string name) returns boolean;\n\n# Returns the `mediation:Context` instance which captured the initial contextual information of the resource,\n# before the mediation flow was invoked. Calling this on an original `mediation:Context` object will return itself.\npublic function originalContext() returns Context;\n\n# The HTTP method of the resource method\npublic function httpMethod() returns string;\n\n# Retrieves an instance of `mediation:ResourcePath` which is an API for contextual information on the resource path\n# of this resource. It also contains methods for modifying the resource path as the user sees fit. This resource\n# path is the same path used by the mediation service for deriving the backend endpoint's resource to invoke.\n# Therefore, the default behavior of the mediation service is to invoke a resource in the backend endpoint which\n# has the same relative resource path as the corresponding mediation service resource.\npublic function resourcePath() returns ResourcePath;\n\n# Sets the given `mediation:ResourcePath` instance as the resource path of this context.\npublic function setResourcePath(ResourcePath path);\n\n# Adds a mapping between a path param name and a resolved value for it. There need not be a path parameter in the\n# resource path by the name specified in `name` for one to use this method. On its own, the path param values have\n# no bearing on the resource path.\npublic function addPathParamValue(string name, PathParamValue value);\n\n# Returns the collection of resolved values for the path parameters in this particular context, mapped\n# by the parameter name.\npublic function resolvedPathParams() returns map&lt;PathParamValue&gt; &amp; readonly;\n\n# Removes the resolved path parameter value which maps to the specified name.\npublic function removePathParamValue(string name);\n\n# Adds a query parameter to the request to be sent to the backend. If there is already a query parameter by\n# with the same name, the new value will be appended to it, making it an array.\npublic function addQueryParam(string name, string value);\n\n# Removes the specified query parameter from the request. If the value of the parameter is an array, the whole\n# array will be removed.\npublic function removeQueryParam(string name);\n\n# Retrieves a map of all the query parameters in the current request context. The returned map is a read-only snapshot\n# of the map of query parameters in the context at the time this method was called.\npublic function queryParams() returns map&lt;string[]&gt; &amp; readonly;\n</code></pre>"},{"location":"develop-api-proxy/policy/attach-and-manage-policies/#keywords","title":"Keywords","text":"<p>The <code>Ballerina.toml</code> file needs to include the following keywords for the mediation policies to work:</p> <ul> <li>choreo-apim-mediation-policy: This keyword is a mandatory keyword that is required to identify that the package is a mediation policy type.</li> <li>choreo-apim-mediation-request-flow: Specifies whether the policy applies to the request flow.</li> <li>choreo-apim-mediation-response-flow: Specifies whether the policy applies to the response flow.</li> <li>choreo-apim-mediation-fault-flow: Specifies whether the policy is applicable for the fault flow.</li> </ul> Policy name and description <p>The <code>Package.md</code> file contains information about the policy. Bijira uses this information to render the policy configuring UI. This file is written in Markdown format and should be structured as follows.</p> <p>Format:</p> <pre><code># &lt;policy-name&gt;\n\n## Overview\n\n&lt;policy description&gt;\n</code></pre> <p>Example:</p> <pre><code># ValidateHeader\n\n## Overview\n\nThis policy validates the request and response headers with the configured values.\n</code></pre> Policy versioning <p>When it comes to policy versioning in Bijira or mediation dependencies, it is important to consider the major version changes in the Ballerina language. For example, transitioning from update 1 to update 2 requires a major version increment, which can introduce significant incompatibilities.</p> <p>Therefore, to ensure compatibility, the recommended approach is to version the policy package in a manner that the major version gets upgraded when the Choreo/mediation dependency version is upgraded to a major version.  </p>"},{"location":"develop-api-proxy/policy/overview/","title":"Overview","text":"<p>Bijira simplifies the design, management, and mediation of API proxies with its interactive UI. It enables seamless API proxy customization within its unified UI, allowing you to add or remove resources, map resources, and apply policies at both the API and resource levels\u2014all from the same interface.</p> <p>You can intuitively map API proxies to service contracts with Bijira's interactive UI, ensuring clear and consistent request routing to backend services. With built-in mediation policies, Bijira provides flexibility to manage API requests and responses, facilitating custom transformations and logic without requiring custom code. This enhances API manageability, making it easier to configure, update, and control API traffic within the platform.</p>"},{"location":"develop-api-proxy/policy/overview/#designing-api-proxies","title":"Designing API Proxies","text":"<p>You can further redesign and customize your API proxy created from following the Create API Proxy flow.</p> <ol> <li> <p>You can add new resources and delete existing ones as necessary    </p> </li> <li> <p>You can delete existing resource mappings, with the option to delete the resources along with the mapping if you do not intend to map it to a different backend resource    </p> </li> <li> <p>You can create a new mapping for a new resource you created    </p> </li> </ol> <p>Info</p> <p>Each change made to proxy will be automatically saved as the <code>Latest saved</code> version in History. You can restore to the initial version or to an earlier version that has been deployed by clicking the <code>Restore</code> button in the History Pane.</p>"},{"location":"develop-api-proxy/policy/policies/","title":"Policies","text":"<p>Policies are units of business logic that you can apply to modify the flow of API invocations.</p> <p>You can apply a policy in API or resource level to alter the  <code>Request</code>, <code>Response</code>, or <code>Error</code> flow of an API invocation before it reaches the backend or the client. For example, you can add a policy to the response flow to transform the payload from JSON to XML and add a header to the response.</p>"},{"location":"develop-api-proxy/policy/policies/#inbuilt-mediation-policies","title":"Inbuilt Mediation Policies","text":"<p>Bijira supports a set of inbuilt mediation policies that can handle common API transformation and mediation tasks. These policies run within a single mediation service, making it straightforward to implement and manage complex mediation logic. The following inbuilt policies are available in Bijira at API level and resource level:</p>"},{"location":"develop-api-proxy/policy/policies/#api-level-policies","title":"API-level Policies","text":"<ul> <li>OAuth2: Secures an API by enforcing OAuth 2.0 authentication. This policy ensures that only authenticated clients with valid access tokens can access the API. The security header is configurable at the API level. This policy is enabled by default for every API resource, and can be disabled for individual resources by removing from the flow as necessary.</li> <li>Pass User Context to Backend: Forwards user-related information to the backend service under the header <code>x-jwt-assertion</code>. This policy ensures that user identity details are included in the request sent to the backend. In addition users can set end user token audiences. It is useful for enforcing authorization, logging, or customizing responses based on the authenticated user. This policy is only applicable at the API level.</li> <li>Rate Limiting: Restricts the number of API requests a client can make within a defined time window. Users can configure limits based on request count and time unit (e.g. 100 requests per minute). When the limit is exceeded, further requests are rejected with a <code>429 Too Many Requests</code> response. Users are able to set rate limiting thresholds at both API level and resource level.</li> <li>CORS (Cross-Origin Resource Sharing): Controls how resources on an API can be accessed from different origins. This policy allows users to configure <code>Access-Control-Allow-Origin</code>, <code>Access-Control-Allow-Headers</code>, <code>Access-Control-Allow-Methods</code>, and <code>Access-Control-Allow-Credentials</code>. It ensures secure and flexible cross-origin requests, enabling APIs to be accessed from web applications running on different domains. This policy is only applicable at the API level.</li> </ul>"},{"location":"develop-api-proxy/policy/policies/#resource-level-policies","title":"Resource-level Policies","text":"<ul> <li>JSON to XML: Transforms a request/response with a JSON payload to a request/response with an XML payload. This is only applicable to the request flow and response flow mediation sequences. This policy assumes that the request/response payload is JSON. Attempting to use it on a request/response with a non-JSON payload will result in premature termination of the mediation flow. For the same reason, this policy cannot be attached multiple times to a resource since once it is used, the payload will be an XML value.</li> <li>XML to JSON: Transforms a request/response with an XML payload to a request/response with a JSON payload. This policy assumes that the request/response payload is XML. Attempting to use it on a request/response with a non-XML payload will result in premature termination of the mediation flow. For the same reason, this policy cannot be attached multiple times to a resource since once it is used, the payload will be a JSON value.</li> <li>Remove Query Parameter: Removes specified query parameters from a request. You can use this policy multiple times to remove different parameters. Attempting to remove a non-existent parameter has no effect. If the parameter exists, it will be removed; otherwise, the request proceeds as usual.</li> <li>Remove Header: Removes specified headers from a request or response. You can attach this policy multiple times to remove multiple headers. The header name must be static, but you can use placeholders to configure different values for different environments. For example, <code>${headerName}</code>.</li> <li>Add Query Parameter: Adds query parameters to a request. You can attach this policy multiple times to add various parameters. Adding the same parameter multiple times creates an array of values. The parameter name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${fooValue}</code>.</li> <li>Add Header: Adds headers to a request or response. If the same header is added multiple times, values are appended rather than overwritten. The header name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${authzHeaderValue}</code>.</li> <li>Set Header: Sets headers in a request or response, overwriting any existing values. You can attach this policy multiple times to set multiple headers. Each time the same header is set, it replaces the previous value. The header name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${authzHeaderValue}</code>.</li> <li>Rewrite Resource Path: Modifies the resource path of an HTTP request by replacing the original path with a new relative path. You can apply this policy multiple times, but only the last instance will take effect. The new path must be static, but you can use placeholders to configure different values for different environments. For example, <code>${myResourcePath}</code>.</li> <li>Log Message: Logs the payload and headers of a request or response. Attaching this policy multiple times results in duplicate log entries. By default, headers and payloads are not logged. To log them, you can enable <code>Log Headers</code> and <code>Log Payload</code> parameters. To exclude specific headers when logging, you can use the <code>Excluded Headers</code> parameter, which takes a comma-separated list of header names. An error will occur if payload logging is enabled but the payload cannot be read.</li> <li>Permissions (Scopes): Defines fine-grained access control by assigning permissions (scopes) to API resources. Each resource can have one or more scopes, and only users or applications with the required scope in their access token can invoke the resource.</li> </ul> <p>These inbuilt mediation policies provide flexibility to manage API requests and responses, allowing for custom transformations and logic without requiring custom code.</p> <p>For details on attaching and managing one or more policies to an API proxy component implementation via the Bijira Console, see Attach and Manage Policies.</p>"},{"location":"devportal/developer-portal-mode/","title":"Developer Portal Mode","text":"<p>Bijira's developer portal can be configured in different modes based on your requirements.</p> <p>You can find this under the Configuration tab in the Developer Portal section in your organization's settings pane.</p> <p></p> <p>Devportal confgiration has 3 modes.</p> <ol> <li>API Portal - In this mode, only API Proxies will be shown in the Devportal. Suitable if you have nothing to do with MCP.</li> <li>MCP Hub - In this mode, only MCP Servers will be shown in the Devportal. Suitable if you are using Bijira for MCP related use cases.</li> <li>API &amp; MCP Portal - This is the default mode. Both API Proxies and MCP Servers will be shown in the Devportal</li> </ol>"},{"location":"devportal/theming-devportal-api-level/","title":"Customize Developer Portal Manually for your Organization","text":"<p>Developer portal allows you to customize the user interfaces(UIs)in organization level as well as in API level. with this you can ensure that your pages not only look great but also align perfectly with your brand's identity.</p> <p>Customization take place at two levels:</p> <ul> <li>Org Level : This functions as the default branding and applies to all APIs in an organization.</li> <li>API Level : Each API can have its own branding. This overrides the organizational level branding applied by default to the organization.</li> </ul>"},{"location":"devportal/theming-devportal-api-level/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>TestingOrg</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"devportal/theming-devportal-api-level/#get-into-developer-portal-tab","title":"Get into <code>Developer Portal</code> tab","text":"<p>Go though the below steps to get the <code>Developer Portal</code> tab.</p> <ul> <li>Close the project tab selected by default. Then the <code>Organization</code> tab will be selected.</li> <li>Go to sidebar and click the dropdown near the username and select <code>Settings</code>.</li> <li>Select <code>Developer Portal</code> tab.</li> </ul>"},{"location":"devportal/theming-devportal-api-level/#theme-your-devportal-in-api-level","title":"Theme your Devportal in API Level","text":"<p>Go through the following steps to customize the theme of the Devportal in the API level.</p> <ol> <li>Select <code>API Level</code> tab.</li> </ol>"},{"location":"devportal/theming-devportal-api-level/#html","title":"HTML","text":"<p>The <code>HTML</code> tab will show the the read only view reference to the HTML structure of APIs in your organization. To edit the content of this page go to Customize API Landing Page content.</p>"},{"location":"devportal/theming-devportal-api-level/#org-level-css","title":"Org level CSS","text":"<p>This tab will shows the reference to main CSS from the the organizational level theme settings.</p>"},{"location":"devportal/theming-devportal-api-level/#css","title":"CSS","text":"<p>Here you can adjust appearance of the API Overview page by changing the css styles.</p> <p></p> <ol> <li> <p>Replace the following sections in the CSS.You can see the changes in the preview.</p> <pre><code>.key-benefit-item h3 {\nfont-size: 2rem;\nfont-weight: 600;\ncolor: var(--main-text-color);\nmargin-bottom: 0.625rem;\n}\n.key-benefit-item p {\nfont-size: 0.75rem;\ncolor: var(--primary-main-color);\nmargin-bottom: 1.25rem;\nline-height: 2;\n}\n</code></pre> <p></p> </li> <li> <p>Click Publish to Developer Portal to publish the CSS changes.</p> </li> </ol>"},{"location":"devportal/theming-devportal-api-level/#customize-api-landing-page-content","title":"Customize API Landing Page content","text":"<p>To customize the content of an API go through the following steps.</p> <ol> <li>Select a Project in your organization.</li> <li> <p>Select an API to do the customization.</p> <p></p> </li> <li> <p>Click Documents under Develop from the sidebar.</p> </li> <li>Go to API Landing Page tab.</li> <li>Select HTML tab. </li> <li>Customize the content by changing the html given. You can see the finalized details in the preview.</li> </ol> <p>Try This in Preview</p> <p>Here is a sample HTML code. You can paste it and see the changes in the preview.</p> <pre><code>&lt;div class=\"col-lg-11 container-fluid api-overview\" name=\"Overview\"&gt;\n&lt;div class=\"row api-overview-content\"&gt;\n&lt;div class=\"row text-start\"&gt;\n&lt;h1 class=\"overview-title\"&gt;Overview&lt;/h1&gt;\n&lt;/div&gt;\n&lt;div class=\"col-lg-8 api-content-text\"&gt;\n&lt;div&gt;\n&lt;p class=\"intro-text-des\"&gt;\n                    The Reading List API enables developers to integrate reading list functionality into their applications. This includes operations such as adding, updating, deleting, and retrieving books or articles in a user's personal list. The API supports authentication, tagging, sorting, and filtering to help users manage their reading goals effectively.\n                &lt;/p&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;h5 class=\"section-title\"&gt;Key Capabilities&lt;/h5&gt;\n&lt;/div&gt;\n&lt;ul class=\"requirement-list\"&gt;\n&lt;li&gt;&lt;span class=\"checkmark\"&gt;&lt;i class=\"bi bi-check-circle-fill\"&gt;&lt;/i&gt;&lt;/span&gt; Create and manage personalized reading lists for each user.&lt;/li&gt;\n&lt;li&gt;&lt;span class=\"checkmark\"&gt;&lt;i class=\"bi bi-check-circle-fill\"&gt;&lt;/i&gt;&lt;/span&gt; Add metadata such as title, author, genre, and reading status.&lt;/li&gt;\n&lt;li&gt;&lt;span class=\"checkmark\"&gt;&lt;i class=\"bi bi-check-circle-fill\"&gt;&lt;/i&gt;&lt;/span&gt; Mark items as \"read\", \"currently reading\", or \"to-read\".&lt;/li&gt;\n&lt;li&gt;&lt;span class=\"checkmark\"&gt;&lt;i class=\"bi bi-check-circle-fill\"&gt;&lt;/i&gt;&lt;/span&gt; Search and filter items by keywords, tags, or status.&lt;/li&gt;\n&lt;li&gt;&lt;span class=\"checkmark\"&gt;&lt;i class=\"bi bi-check-circle-fill\"&gt;&lt;/i&gt;&lt;/span&gt; RESTful design with predictable URL patterns and JSON responses.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n&lt;div class=\"col-lg-4 api-sidebar\"&gt;\n&lt;div&gt;\n&lt;h5 class=\"section-title\"&gt;Use this API to:&lt;/h5&gt;\n&lt;/div&gt;\n&lt;ul class=\"api-list\"&gt;\n&lt;li&gt;Authenticate users and associate them with unique reading lists.&lt;/li&gt;\n&lt;li&gt;Add or remove books and articles from a list using POST/DELETE methods.&lt;/li&gt;\n&lt;li&gt;Fetch full or filtered reading lists using GET queries with parameters.&lt;/li&gt;\n&lt;li&gt;Update the read status, notes, or tags of a reading item.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;\n&lt;button type=\"button\" class=\"common-btn-outlined\"&gt;Explore API Docs&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p></p>"},{"location":"devportal/theming-devportal-org-level/","title":"Customize Developer Portal Manually for your Organization","text":"<p>Developer portal allows you to customize the user interfaces(UIs)in organization level as well as in API level. with this you can ensure that your pages not only look great but also align perfectly with your brand's identity.</p> <p>Customization take place at two levels:</p> <ul> <li>Org Level : This functions as the default branding and applies to all APIs in an organization.</li> <li>API Level : Each API can have its own branding. This overrides the organizational level branding applied by default to the organization.</li> </ul>"},{"location":"devportal/theming-devportal-org-level/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>TestingOrg</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"devportal/theming-devportal-org-level/#get-into-developer-portal-tab","title":"Get into <code>Developer Portal</code> tab","text":"<p>Go though the below steps to get the <code>Developer Portal</code> tab.</p> <ul> <li>Close the project tab selected by default. Then the <code>Organization</code> tab will be selected.</li> <li>Go to sidebar and click the dropdown near the username and select <code>Settings</code>.</li> <li>Select <code>Developer Portal</code> tab.</li> </ul>"},{"location":"devportal/theming-devportal-org-level/#theme-your-devportal-in-org-level","title":"Theme your Devportal in Org Level","text":"<p>Go through the following steps to customize the theme of the Devportal in the organization level.</p>"},{"location":"devportal/theming-devportal-org-level/#theme-settings","title":"Theme Settings","text":"<ol> <li>Select <code>Org Level</code> tab.</li> <li>Select <code>Theme Settings</code> tab. Here, you can manage and customize theme colors for your organization.</li> <li> <p>Select the colors below from the palette. A preview can be shown.</p> Field Name Color Background #f8ff84 Primary - Main #3e9529 Secondary - Main #8d21c4 Text- Main #1f1fcd Gradient- Main linear-gradient(135deg, #cbd340 0%, #79d93f 100%) <p></p> </li> <li> <p>Expand the dropdown for <code>Typography</code> and select the font (e.g., Arial Black).</p> <p></p> </li> <li> <p>If you want to save these changes as a draft, select  <code>Save As Draft</code>.</p> </li> <li> <p>If it perfectly aligns with your organization's unique identity, click <code>Publish to Devportal</code>.</p> <p></p> </li> <li> <p>Go to <code>Developer portal</code> to see the changes.</p> <p></p> </li> </ol>"},{"location":"devportal/theming-devportal-org-level/#html","title":"HTML","text":"<ol> <li>Select <code>HTML</code> tab. You can edit the HTML structure of pages.</li> <li> <p>paste the below html code for <code>hero-section</code> .</p> <pre><code>&lt;section class=\"hero-section\"&gt;\n&lt;div class=\"container-fluid\"&gt;\n&lt;div class=\"hero-content hero\"&gt;\n&lt;div class=\"row h-100\"&gt;\n&lt;!-- Left Content --&gt;\n&lt;div class=\"col-xl-9 col-lg-6 col-md-12 text-lg-start d-flex flex-column justify-content-center\"&gt;\n&lt;div class=\"hero-left-content\"&gt;\n&lt;h1 class=\"hero-title\"&gt;\n                            Empower your development with our &lt;span class=\"span-highlight\"&gt; APIs &lt;/span&gt;\n                            to craft intuitive and robust applications\n                        &lt;/h1&gt;\n&lt;p class=\"hero-description\"&gt;\n                            Use our APIs to build amazing enterprise and consumer applications. Browse our API catalog,\n                            subscribe, and get going in minutes.\n                        &lt;/p&gt;\n&lt;div class=\"hero-buttons d-flex gap-3\"&gt;\n&lt;a href=\"{{ baseUrl }}/apis\" class=\"common-btn-primary common-btn-secondary\"&gt;Browse our APIs \u2192&lt;/a&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- Right Content --&gt;\n&lt;div class=\"col-xl-3 col-lg-6 col-12 d-flex justify-content-end align-items-end\"&gt;\n&lt;div class=\"hero-image-container\"&gt;\n&lt;div id=\"heroImage\" class=\"me-0\"&gt;\n&lt;img class=\"hero-banner-image d-none\" src=\"https://raw.githubusercontent.com/wso2/docs-bijira/refs/heads/main/en/devportal-theming/hero.svg\"&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n</code></pre> </li> <li> <p>The changes can be seen in the preview section.</p> <p></p> </li> </ol>"},{"location":"devportal/theming-devportal-org-level/#css","title":"CSS","text":"<ol> <li>Select <code>CSS</code> tab. You can modify CSS styles to adjust the appearance of the pages.</li> <li> <p>Paste the below code for <code>.hero-title</code> .</p> <p>``` CSS  .hero-title{     font-size: 2rem;     font-weight: 1000;     color: var(--primary-dark-color);     margin-bottom: 5rem;     line-height: 2;  } 3. The changes can be seen in the preview section.</p> <p></p> </li> </ol>"},{"location":"devportal/theming-devportal-org-level/#referenced-css","title":"Referenced CSS","text":"<p>This section shows the reference for the main CSS from the theme settings you assigned at the beginning.</p> <p></p>"},{"location":"devportal/theming-devportal-org-level/#assets","title":"Assets","text":"<ol> <li> <p>The Logo of the devportal can be changed by clicking <code>Choosing File</code> under Devportal Logo.</p> <p></p> </li> <li> <p>After adding the image you can see the finalized changes in the preview.</p> <p></p> </li> </ol>"},{"location":"devportal/theming-devportal-with-ai/","title":"Theming Developer Portal with AI for your Organization","text":"<p>AI-powered branding simplifies the process of customizing your organization's Developer portal. By leveraging AI Branding, you can ensure that your pages not only look great but also align perfectly with your brand's identity.</p>"},{"location":"devportal/theming-devportal-with-ai/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>TestingOrg</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"devportal/theming-devportal-with-ai/#get-into-developer-portal-tab","title":"Get into <code>Developer Portal</code> tab","text":"<p>Go though the below steps to get the <code>Developer Portal</code> tab.</p> <ul> <li>Close the project tab selected by default. Then the <code>Organization</code> tab will be selected.</li> <li>Go to sidebar and click the dropdown near the username and select <code>Settings</code>.</li> <li>Select <code>Developer Portal</code> tab.</li> </ul>"},{"location":"devportal/theming-devportal-with-ai/#theme-your-devportal-with-ai","title":"Theme your Devportal with AI","text":"<p>Go through the following steps to customize the theme of the Devportal with AI.</p> <ol> <li> <p>Click on <code>Theme with AI</code>.</p> <p></p> </li> <li> <p>Enter the website URL  you'd like to use as the basis for branding.</p> <p></p> </li> <li> <p>Click enter to automate branding for your organization based on the website you provided. The system will then process the website and start generating the branding theme. You can see the result in the preview section.</p> <p></p> </li> <li> <p>If you want to save those changes was a draft you can select <code>Save As Draft</code>.</p> </li> <li> <p>If it perfectly align with your organization's unique identity, you can click <code>Publish to Devportal</code>.</p> <p></p> </li> <li> <p>Go to <code>Developer portal</code> to see the changes.</p> <p></p> <p>The finalized view will be as follows:</p> <p></p> </li> </ol>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-api-key/","title":"Consume an API Secured with API Key","text":""},{"location":"devportal/consuming-services/consume-an-api-secured-with-api-key/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have Created an Application and Subscribed to an API to consume.</p>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-api-key/#creating-an-api-key","title":"Creating an API Key","text":"<p>To consume an API secured with an API key, create an application in the Bijira Developer Portal and subscribe it to the API under a defined usage policy. The API key will then be associated with that specific application.</p>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-api-key/#steps-to-create-an-api-key","title":"Steps to Create an API Key","text":"<ol> <li>Navigate to the Bijira Developer Portal and sign in.</li> <li>Click on Applications in the Developer Portal sidebar.</li> <li>Select the Application the desired API is subscribed to.</li> <li>Under the Subscribed APIs section, click Generate Key button in the row corresponding to the desired API to generate its API key.</li> <li>The API key will be generated with the scopes defined for the selected API.</li> </ol>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-api-key/#consume-an-api","title":"Consume an API","text":"<p>Use this API Key to authenticate API requests by including it in the <code>api-key</code> header when invoking the API.</p> <p>Example: <pre><code>curl -H \"api-key: &lt;YOUR_API_KEY&gt;\" -X GET \"https://my-sample-api.bijiraapis.dev/greet\"\n</code></pre></p>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-oauth2/","title":"Consume an API Secured with OAuth2","text":""},{"location":"devportal/consuming-services/consume-an-api-secured-with-oauth2/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding, ensure you have Created an Application and Subscribed to an API to consume.</p>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-oauth2/#generate-keys","title":"Generate keys","text":"<p>Bijira uses OAuth 2.0 bearer token-based authentication for API access. An API access token is a string passed as an HTTP header in API requests to authenticate access.</p> <p>Once you create an application, you can generate credentials for it. Bijira provides a consumer key and consumer secret when you generate credentials for the first time. The consumer key acts as the unique identifier for the application and is used for authentication.</p> <p>To generate an access token for testing purposes, follow these steps:</p> <ol> <li> <p>Navigate to the Bijira Developer Portal and sign in.</p> </li> <li> <p>Click on Applications in the Developer Portal sidebar.</p> </li> <li> <p>Click on the application for which you want to generate keys and tokens.</p> </li> <li> <p>In the Application detail banner click Generate Key under OAuth2 section.</p> </li> <li> <p>This will generate the consumer key and consumer secret with default configurations.</p> </li> </ol> <p>You can use the View and Modify buttons to inspect and customize the default key generation settings.</p> <p>To generate a test token for testing purposes, click Generate and copy the displayed token. </p> <p>Alternatively, click Instructions to view details about the token endpoint. You can either copy the generated cURL command to obtain a test token using a cURL client, or use the consumer key and consumer secret to generate an API access token by invoking the token endpoint. You can also revoke the access token by invoking the revoke endpoint.</p>"},{"location":"devportal/consuming-services/consume-an-api-secured-with-oauth2/#consume-an-api","title":"Consume an API","text":"<p>Use this generated access token to authenticate API requests by including it in the <code>Bearer</code> header when invoking the API.</p> <p>Example:</p> <pre><code>curl -H \"Authorization: Bearer &lt;YOUR_ACCESS_TOKEN&gt;\" -X GET \"https://my-sample-api.bijiraapis.dev/greet\"  </code></pre> <p>Note</p> <p>The name of the Authorization header may vary depending on the API provider\u2019s configuration. Always refer to the API\u2019s Swagger (OpenAPI) definition for the correct header format.</p>"},{"location":"devportal/discover-apis/api-documentations/","title":"API Documentation","text":"<p>The API documentation page provides essential information such as endpoints, schemas, security mechanisms, and the base URL.</p>"},{"location":"devportal/discover-apis/api-documentations/#view-api-documentation","title":"View API Documentation","text":"<ol> <li>Go to APIs in the sidebar.</li> <li>Select an API to view the documentation.</li> <li> <p>Select Documentation under APIs or you can click the documentation button in the header section.</p> <p></p> </li> <li> <p>You can see the Documentations added to your API under different sections.</p> </li> <li> <p>Select the documentation to view the content.</p> <p></p> </li> </ol>"},{"location":"devportal/discover-apis/api-search/","title":"Search APIs","text":"<p>You can search for APIs in the Developer Portal that have already been published from Bijira.</p> <ol> <li> <p>Click APIs from the sidebar.APIs list can be seen</p> <p></p> </li> <li> <p>Use one of the following methods to search:</p> Category Explanation Name Full or partial name of the API Type Type of the API (e.g., REST) Version Version of the API (e.g., v3.5) Description Full or partial description of the API <p>Example: Searching by API version.</p> </li> </ol> <p></p>"},{"location":"devportal/manage-applications/create-an-application/","title":"Create Applications","text":"<p>An application is a logical representation of a physical application such as a mobile app, webapp, device, etc. If an application needs to consume an API, it should subscribe to the required API over a selected business plan, which determines the usage quota the application is allowed. A single application can have multiple API subscriptions.</p>"},{"location":"devportal/manage-applications/create-an-application/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Developer portal for the first time, go to Bijira and create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>TestingOrg</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"devportal/manage-applications/create-an-application/#create-a-new-application","title":"Create a new application","text":"<ol> <li> <p>Replace <code>&lt;organization name&gt;</code> in the following URL with your actual organization name to access your Developer Portal.</p> <pre><code>https://devportal.bijira.dev/&lt;organization name&gt;/views/default\n</code></pre> </li> <li> <p>Sign in to Developer Portal using your preferred method.</p> </li> <li>Click Applications from the sidebar.</li> <li> <p>Click Create Application card. If you already have one or more applications click + Create button.</p> <p></p> </li> <li> <p>Enter application name and click Create.</p> <p></p> </li> <li> <p>You will find the created applications list.</p> </li> </ol> <p></p>"},{"location":"devportal/manage-applications/create-an-application/#add-application-description","title":"Add Application Description","text":"<ol> <li>Selected application.</li> <li> <p>Click + Add description to add the application's description.</p> <p></p> </li> <li> <p>Click \u2714 to save the description.</p> <p></p> </li> </ol>"},{"location":"devportal/manage-subscriptions/subscribe-to-an-api/","title":"Subscribe to an API","text":"<p>To use a published API in your application, you must subscribe to it. When you subscribe to an API, your subscription covers all minor versions within the API's major version.</p> <p>The subscription process ensures secure authentication of API requests using application keys. While you can generate credentials for an API without subscribing to an application, this approach limits advanced configuration options such as access token expiry time, revoke token expiry time, ID token expiry time, and enabling access to the API without a secret. Generating keys directly in the API is suitable for testing or short-term use but is not recommended for long-term production usage.</p> <p>To subscribe to an API via an application, follow these steps:</p> <ol> <li> <p>Go to the Bijira Developer Portal and sign in to your organization.</p> </li> <li> <p>To navigate to applications, in the Developer Portal sidebar, click Applications.</p> </li> <li> <p>On the Applications page, click on the application you want to use to subscribe to an API.</p> </li> <li> <p>Under the Subscribed APIs section, click Subscribe to more APIs.</p> </li> <li> <p>In the APIs page, click Subscribe to subscribe to an API. You can subscribe to one or more APIs based on your requirements.</p> <p>Tip</p> <p>When a new minor version of an API is published, the major version-based invocation URL automatically routes to the latest minor version within the subscribed API's major version. This ensures that existing client applications continue to function without disruption while benefiting from improvements or additions in the newer minor version.</p> </li> </ol> <p>Once you subscribe to an API, you can invoke it using the application keys.</p>"},{"location":"governance/govern-api-proxy/","title":"Govern API Proxies","text":"<p>To govern the API proxies, you can define rulesets/documents, and policies. These concepts help you enforce governance policies on APIs and ensure compliance with security, compliance, performance, and operational guidelines.</p> <p>To define the governance compliance standards for API proxies, you can either create Spectral rulesets or use the natural language specification to define the rules.</p>"},{"location":"governance/govern-api-proxy/#create-a-ruleset","title":"Create a Ruleset","text":"<ol> <li>Sign in to the Bijira Console.</li> <li>In the Bijira Console header, go to the Organization list and select your organization.</li> <li>In the left navigation menu, click Admin and then click Governance. This opens the Governance page.</li> <li>From the Rulesets / Documents section, select Rulesets and click Add Rulesets button.</li> <li>Provide the following details</li> </ol> Field Name Description Mandatory Options/Values Name The name of the ruleset. Yes - Description A brief description of the ruleset. No - Applies To The Proxy component to which the ruleset is applied. Yes - Artifact Type The type of the API. Yes REST API, Async API Documentation Link A link to the documentation of the ruleset. No - Spectral Ruleset Define the ruleset content using the Spectral. You can upload a pre-written ruleset file. Yes - Provider Name The name of the provider who created the ruleset. Yes -"},{"location":"governance/govern-api-proxy/#add-a-document","title":"Add a Document","text":"<ol> <li>From the Rulesets / Documents section, select Documents and click Add Document button.</li> <li>Provide the following details</li> </ol> Field Name Description Mandatory Options/Values Name The name of the document. Yes - Description A brief description of the document. No - Applies To The Proxy component to which the document is applied. Yes API Definition Artifact Type The type of the API. Yes HTTP API Document Select a file for the document. Yes -"},{"location":"governance/govern-api-proxy/#policy","title":"Policy","text":"<p>Policy will be used to enforce the rulesets and documents on the API proxies. A policy can only be have either rulesets or documents attached to it. To create a policy, follow the below steps.</p> <ol> <li>From the Policies section, click Add Policy button.</li> <li>From the pop-up window, Select the source of the rules whether it is Using Rule Definition or Using Document.</li> <li>Based on the selection, fill in the required fields.</li> </ol> Field Name Description Mandatory Options/Values Name The name of the policy. Yes - Description A brief description of the policy. No - Applicability The level of applicability of the policy. Yes Global/ Specify Enforcement Detail The detail of the policy enforcement criteria. Yes Ruleset/Document The rulesets or document that should attached to the policy. Yes - <p></p>"},{"location":"governance/govern-api-proxy/#enforcement-detail","title":"Enforcement Detail","text":"Field Name Description Mandatory Options/Values Governed State The state of the API to which the policy is applied. (Currently only supports Update) Yes Update Severity Levels The severity level of the policy violation. Yes Error, Warn, Info Actions The action to be taken when a policy violation is detected. (Currently only supports Notify) Yes Notify <p>By adding the policy, all the existing and newly created API proxies will be validated against the defined rulesets and documents.</p>"},{"location":"governance/overview/","title":"Bijira API Management Governance","text":"<p>API Management Governance consists of a set of processes, practices, roles, and responsibilities designed to ensure the effective and efficient management of APIs throughout their lifecycle. Establishing a governance strategy is essential for maintaining consistency, security, and compliance in API development, management, and consumption.</p> <p>Implementing API governance provides the following benefits:</p> <ul> <li>Security and Compliance \u2013 Enforces authentication, authorization, and regulatory compliance requirements.</li> <li>Consistency \u2013 Standardizes API design, documentation, and versioning to maintain uniformity.</li> <li>Performance and Reliability \u2013 Enables monitoring, rate limiting, and policy enforcement to ensure optimal API performance.</li> <li>Lifecycle Management \u2013 Supports structured API development, deployment, deprecation, and retirement processes.</li> <li>Collaboration \u2013 Defines clear roles and responsibilities for API stakeholders, improving coordination.</li> <li>Discoverability and Reusability \u2013 Facilitates API cataloging and reuse to minimize redundant development efforts.</li> <li>Business Agility \u2013 Accelerates API delivery, helping organizations meet customer and partner needs efficiently.</li> </ul> <p>Bijira API Management provides a comprehensive governance capabilities that powered by AI to evaluate API compliance with governance standards given in a form of natural language specification, and also spectral based compliance validation for rules defined in OpenAPI and AsyncAPI specifications.</p> <p>This section outlines the governance concepts available in Bijira.</p>"},{"location":"governance/overview/#governance-concepts","title":"Governance Concepts","text":"<p>API Management Governance build on the following concepts</p>"},{"location":"governance/overview/#ruleset","title":"Ruleset","text":"<p>A ruleset is a collection of rules that define governance policies to be enforced on APIs. These rules cover various aspects of API management, including security, compliance, performance, and operational guidelines. Rulesets can be defined at the organization level and later applied through policies to ensure governance enforcement.</p> <p>Each ruleset must have a unique name and may include a description to provide additional context. Rulesets are used to validate specific aspects of an API, including:</p> <ul> <li>API Definition \u2013 The OpenAPI or AsyncAPI definition that establishes the API contract.</li> <li>API Metadata \u2013 Information about the API, such as name, version, context, and other details.</li> <li>API Documentation \u2013 Documentation that provides usage guidelines and other relevant information about the API.</li> </ul> <p>When defining a ruleset, the API type must be specified. Supported API types include:</p> <ul> <li>REST API</li> <li>Async API</li> </ul>"},{"location":"governance/overview/#documents","title":"Documents","text":"<p>Documents are used to feed specifications and guidelines to the Bijira AI engine for compliance validation. Documents can be in the form of natural language specifications or OpenAPI/AsyncAPI specifications.</p>"},{"location":"governance/overview/#policy","title":"Policy","text":"<p>A policy is a set of rulesets that define governance policies to be enforced on APIs. Policies can be created at the organization level and later applied to APIs to enforce security, compliance, performance, and other governance requirements. Policies act as high-level groupings of rules and can be used to categorize APIs, such as external APIs, internal APIs, and partner APIs.</p> <p>Each policy must have a unique name and may include a description to provide additional context.</p> Policy Attachment and Labeling <p>Policies can be attached to one or more labels to categorize them effectively. Labels serve as a link between policies and APIs when a policy is assigned to a label, it is automatically applied to all APIs associated with that label.</p> Policy Enforcement <p>Policy enforcement is an integral part of policy definition and can be categorized into three types:</p> 1. Policy Enforcement on APIs <p>All the policies will be enforced on the API proxies when the proxies are updated.</p> 2. Rule Violation Level <p>Policies can be enforced based on the severity of rule violations. The supported levels include:</p> <ul> <li>Error \u2013 Indicates a critical violation.</li> <li>Warn \u2013 Indicates a warning that requires attention.</li> <li>Info \u2013 Provides informational messages about compliance.</li> </ul> 3. Rule Violation Action <p>Policies define actions to be taken when a rule violation is detected. The supported actions include:</p> <ul> <li>Notify \u2013 Alerts users about the violation. Notifications appear in compliance dashboards, allowing users to review and take necessary actions.</li> </ul>"},{"location":"introduction/quick-start-guide/","title":"Quick Start Guide","text":"<p>Bijira simplifies securely exposing existing services as managed APIs. It also allows you to manage all aspects of an API's lifecycle, security, throttling, and governance, so you can focus on service development.</p> <p>In this tutorial, you will use Bijira to expose a service as an API proxy and publish it to the Bijira Developer Portal for application developers to consume.</p>"},{"location":"introduction/quick-start-guide/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>If you're signing in to the Bijira Console for the first time, create an organization:</p> <ol> <li>Go to Bijira Console and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p> </li> </ol>"},{"location":"introduction/quick-start-guide/#step-1-create-a-project","title":"Step 1: Create a Project","text":"<ol> <li>Go to Bijira Console and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter the following details:</p> <p>Info</p> <p>The Name field must be unique and cannot be changed after creation.</p> Field Value Display Name Sample Project Identifier sample-project Description My sample project </li> <li> <p>Click Create. This creates the project and takes you to the project home page.</p> </li> </ol>"},{"location":"introduction/quick-start-guide/#step-2-create-an-api-proxy","title":"Step 2: Create an API Proxy","text":"<ol> <li>On the project home page, click Import API Contract under Create an API Proxy for My API (Ingress).</li> <li>Click URL for API Contract, enter the following URL, and then click Next:    <pre><code>https://raw.githubusercontent.com/wso2/docs-bijira/refs/heads/main/en/docs/assets/files/sample-api.yaml\n</code></pre></li> <li>Create API Proxy from Contract page will be opened. Click Create to complete the API proxy creation process.     </li> </ol>"},{"location":"introduction/quick-start-guide/#step-3-test-the-api-proxy","title":"Step 3: Test the API Proxy","text":"<p>You can test the API proxy in the development environment before promoting it to production. Bijira provides the following options to test your API proxy:</p> <ul> <li>OpenAPI Console</li> <li>cURL</li> <li>API Chat</li> </ul> <p>In this guide, you will use the OpenAPI Console.</p> <ol> <li> <p>In the left navigation menu, click Test and then click Console.</p> <p>Tip</p> <p>Since the API proxy is secured when deployed, you will need a key to invoke it. Bijira automatically generates a key when you navigate to the OpenAPI Console pane.</p> </li> <li> <p>In the OpenAPI Console pane, select Development from the environment drop-down list.</p> </li> <li>Expand the <code>GET /uuid</code> method and click Try it Out to test it.</li> <li> <p>Click Execute. You will see a response similar to the following:</p> <p></p> <p>This indicates that your API proxy is working as expected.</p> </li> </ol>"},{"location":"introduction/quick-start-guide/#step-4-promote-the-api-proxy-to-production","title":"Step 4: Promote the API Proxy to Production","text":"<p>Once you verify that the API proxy is working as expected in the development environment, you can promote it to production.</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Development card, click Promote.</li> <li> <p>In the Configuration Types pane, select the option Use Development endpoint configuration and click Next.</p> <p>Tip</p> <p>If you want to specify a different endpoint for your production environment, you can make the change in the Configuration Types pane.</p> <p>The Production card indicates the Deployment Status as Active when the API proxy is successfully deployed to production.</p> <p>If you want to verify that the API proxy is working as expected in production, you can test the API in the production environment.</p> </li> </ol> <p>Now that your API is deployed in both development and production environments and can be invoked, the next step is to publish it so that consumers can discover and subscribe to it.</p>"},{"location":"introduction/quick-start-guide/#step-5-publish-the-api-proxy","title":"Step 5: Publish the API Proxy","text":"<ol> <li>In the left navigation menu, click Develop and then click Lifecycle. This opens the Lifecycle page, where you can see the different lifecycle stages of the API. The current lifecycle stage is Created.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API with the specified display name. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol> <p>You can observe that the API lifecycle stage has changed to Published. Now the API is available for consumption. API consumers can consume the API via the Bijira Developer Portal.</p>"},{"location":"introduction/quick-start-guide/#step-6-invoke-the-api","title":"Step 6: Invoke the API","text":"<p>To generate credentials for the published API and invoke it via the Developer Portal, follow these steps.</p> <ol> <li>In the Lifecycle Management pane, click Go to DevPortal. This takes you to the Sample API published to the Bijira Developer Portal.     </li> <li>Subscribe to the API and Generate credentials.<ol> <li>In the Developer Portal left navigation menu, click Applications.</li> <li>Click Create.</li> <li>Add a sample application name and click Create. This will create a new application. Click on the application name and it will navigate you to the application's home page.</li> <li>Click Subscribe to more APIs under Subscribed APIs section. This will navigate you to the API proxy listing page.</li> <li>From the respective API card, choose the Application and click Subscribe. Now your application is subscribed to the published API with your selected subscription plan.</li> <li>Open the created application by selecting Applications from the left menu, and click on the application name.</li> <li>Click Generate Key under OAuth2. If you want to configure Advanced Configurations, click on the Modify button once the keys are generated and configure the values. Bijira generates new tokens and populates the Consumer Key and Consumer Secret fields.</li> <li>Click Generate from the Token section. This will generate an access token that you can use to invoke APIs. Copy the generated access token.</li> </ol> </li> <li>Invoke the API:<ol> <li>Go to the APIs listing page using the left navigation menu.</li> <li>Click on the API to open your API.</li> <li>Click Documentation to open the swagger definition of the API.</li> <li>Select the API resource that you want to invoke.</li> <li>Paste your copied access token with following format: <code>Bearer &lt;ACCESS_TOKEN&gt;</code></li> <li>Click Send API Request.</li> </ol> </li> </ol> <p>Now you have successfully created, deployed, tested, and published an API proxy using Bijira.</p>"},{"location":"introduction/what-is-bijira/","title":"What is Bijira?","text":"<p>Bijira is a cloud-based API management platform designed to simplify API development, deployment, security, and monitoring. Built on the foundation of WSO2 API Manager, Bijira provides a streamlined experience for organizations looking to manage APIs efficiently while leveraging key capabilities from Choreo.</p>"},{"location":"introduction/what-is-bijira/#key-capabilities-of-bijira","title":"Key Capabilities of Bijira","text":""},{"location":"introduction/what-is-bijira/#api-design-and-development","title":"API Design and Development","text":"<ul> <li>Seamless API Creation: Define, document, and publish APIs using an intuitive user interface.</li> </ul>"},{"location":"introduction/what-is-bijira/#api-security-and-governance","title":"API Security and Governance","text":"<ul> <li>Robust Access Control: Enforce authentication and authorization policies with OAuth.</li> <li>Rate Limiting and Throttling: Protect your APIs from abuse by setting up request quotas and rate limits.</li> </ul>"},{"location":"introduction/what-is-bijira/#api-lifecycle-management","title":"API Lifecycle Management","text":"<ul> <li>Comprehensive API Lifecycle Support: From design to deprecation, Bijira enables smooth API versioning and management.</li> </ul>"},{"location":"introduction/what-is-bijira/#developer-experience-and-api-discoverability","title":"Developer Experience and API Discoverability","text":"<ul> <li>Developer Portal: Provide a self-service portal for developers to discover, subscribe to, and test APIs.</li> <li>API Documentation: Auto-generate API documentation to improve adoption and usability.</li> </ul>"},{"location":"introduction/what-is-bijira/#analytics-and-monitoring","title":"Analytics and Monitoring","text":"<ul> <li>Real-time API Insights: Track API performance, consumer usage, and error rates through built-in analytics.</li> <li>Observability and Logging: Gain deeper visibility into API interactions with detailed logs and event tracking.</li> </ul> <p>Bijira brings a modern API management experience, empowering organizations to build, secure, and scale APIs efficiently while reducing operational overhead.</p>"},{"location":"mcp-servers/design-mcp-servers/","title":"Design and Publish MCP Servers","text":""},{"location":"mcp-servers/design-mcp-servers/#prerequisites","title":"Prerequisites","text":""},{"location":"mcp-servers/design-mcp-servers/#create-an-organization","title":"Create an Organization","text":"<p>If you're signing in to the Bijira Console for the first time, create an organization.</p> <ol> <li>Go to Bijira Console and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p>"},{"location":"mcp-servers/design-mcp-servers/#create-a-project","title":"Create a Project","text":"<ol> <li>Go to Bijira Console and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter the following details:</p> <p>Info</p> <p>The Name field must be unique and cannot be changed after creation.</p> Field Value Display Name Sample Project Identifier sample-project Description My sample project </li> <li> <p>Click Create. This creates the project and takes you to the project home page.</p> </li> </ol>"},{"location":"mcp-servers/design-mcp-servers/#create-an-mcp-server","title":"Create an MCP Server","text":"<p>Bijira provides two ways of creating MCP Servers. On the project home page, select MCP Server to view the available options.</p> <p></p>"},{"location":"mcp-servers/design-mcp-servers/#mcp-servers-for-http-backends","title":"MCP Servers for HTTP backends","text":"<p>This option lets you create an MCP Server based on any HTTP API you have.</p> <p></p>"},{"location":"mcp-servers/design-mcp-servers/#mcp-servers-for-existing-api-proxies","title":"MCP Servers for existing API Proxies","text":"<p>If you select Start from Existing Proxy, you will get the following view. Here, you will get the option to select an existing API Proxy in Bijira.</p> <p></p> <p>Important</p> <p>Although the MCP Server is associated with the API Proxy, their lifecycles are not tightly coupled. As a result, unpublishing or undeploying the API Proxy can disrupt the MCP Server created using it, so it\u2019s important to manage these actions carefully.</p>"},{"location":"mcp-servers/design-mcp-servers/#modify-tools-of-your-mcp-server","title":"Modify Tools of your MCP Server","text":"<p>You can modify the details of the Tools of your generated MCP Server by navigating to the Policy section under the Develop menu. The default tool names and descriptions are generated by Bijira based on the information available in the API contract.</p> <p></p> <p>The following options are supported when modifying the Tools</p> <ol> <li>Add new Tool - You can create a new tool by selecting the + icon at the top. You have to provide the name and description at this stage. The schema will be auto generated once  you create the mapping to the REST resource</li> <li>Edit Tool details - You can modify the tool name and description of each tool by clicking on the Tool icon. The tool schema cannot be modified.</li> <li>Delete Tools - By default tools are created for all the resources of the API proxy or the backend service. You can remove unwanted ones by      deleting the tool.</li> </ol> <p>Tip</p> <p>Clear and well-defined tool names and descriptions make it easier for LLMs to recognize and use the tools effectively. If the auto-generated versions don\u2019t meet your needs, you should feel free to customize them to better suit your use case.</p> <p>You have to redeploy the MCP Server after saving for the new changes to be reflected in the gateway.</p>"},{"location":"mcp-servers/design-mcp-servers/#test-the-mcp-server","title":"Test the MCP Server","text":"<p>You can test the MCP Server in the development environment before promoting it to production. Bijira provides its own version of MCP Inspector for this purpose.</p> <p>Info<p>Tool calling via the MCP Inspector is currently not supported for MCP Servers created from existing APIs.</p> </p> <ol> <li>Select MCP Inspector under the Test section.</li> <li>Select Development from the environment drop-down list (If you have deployed the API to other environments, you can select the respective options as well).</li> <li>Click on Get Test Key if the test key is not populated</li> <li> <p>Click on Connect to connect with your deployed MCP Server.</p> <p>Info</p> <p>This will send an Initialize call to the MCP Server deployed in the gateway and establish a connection to the server.</p> <p></p> </li> <li> <p>You can select and call individual tools by providing the parameters if necessary.</p> </li> </ol>"},{"location":"mcp-servers/design-mcp-servers/#publish-the-mcp-server","title":"Publish the MCP Server","text":"<p>Important</p> <p>If you already have a Devportal themed published, please republish the theme before publshing the MCP Servers to Devportal.</p> <p>Once you verify that the MCP Server is working as expected in the development environment, you can promote it to production.</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Development card, click Promote.</li> <li>In the Configuration Types pane, select the option Use Development endpoint configuration and click Next.</li> </ol> <p>The Production card indicates the Deployment Status as Active when the MCP Server is successfully deployed to production.</p> <p>If you want to verify that the MCP Server is working as expected in production, you can test the API in the production environment using the inbuilt MCP Inspector.</p> <p>Now that your MCP Server is deployed in both development and production environments and can be invoked, the next step is to publish it so that consumers can discover and subscribe to it.</p> <ol> <li>In the left navigation menu, click Develop and then click Lifecycle. This opens the Lifecycle page, where you can see the different lifecycle stages of the MCP Server. The default lifecycle stage is Created.</li> <li>Click Publish.</li> <li>In the Publish MCP Server dialog, click Confirm to proceed with publishing the MCP Server with the specified display name. If you want to change the display name, make the necessary changes and then click Confirm. This changes the lifecycle state to Published.</li> </ol>"},{"location":"mcp-servers/design-mcp-servers/#discover-mcp-servers-through-developer-portal","title":"Discover MCP Servers through Developer Portal","text":"<p>You can view the published MCP Server via the Developer Portal.</p> <p>In the Lifecycle Management pane, click Go to DevPortal. This takes you to the MCP Server published to the Bijira Developer Portal.</p> <p>Info</p> <p>If you need to do MCP specific customization to the Developer portal, please refer the MCP Hub documentation.</p> <p></p> <p>Go to the MCP Server listing page using the left navigation menu and select your MCP Server</p> <p>Info</p> <p>The MCP Server url is shown as the Production Endpoint in the overview.</p> <p></p> <p>MCP consumers can discover the available tools through this view. Additionally, sample configurations for setting up the MCP Server with an MCP Client can also be obtained from here.</p>"},{"location":"mcp-servers/design-mcp-servers/#connect-the-mcp-server-with-mcp-clients-ai-agents","title":"Connect the MCP Server with MCP Clients / AI Agents","text":"<p>MCP Servers in Bijira are secured by default. To access them, you must subscribe through an application, obtain a valid token, and configure it in your MCP client.</p> <p>For more information regarding managing applications, please refer this.</p> <p>Please refer this section to get an idea on how you can manage subscriptions to an application. Subscribing to MCP Servers is similar to how you subscribe to API Proxies.</p> <p>Important</p> <p>If you created the MCP Server using an existing API Proxy, you need to subscribe to both using the same application.</p> <p>Once you have the subscriptions in place, you need a valid OAuth2 token to connect with the MCP Server. You can refer to the Generate Keys section to get more information on how you can obtain a token.</p> <p>If you are using VS Code Copilot Agent to test this out, you can copy the MCP Server Configuration from the overview and add that as a server configuration in VS Code\u2019s mcp.json.</p> <ol> <li>Replace the placeholder with the token you generated in the previous step.</li> <li>Start the server through VSCode. If everything runs smoothly, it will connect within a few seconds and automatically detect the MCP Tools exposed by your MCP Server.</li> <li>Now you can try out the tools through the chat option in copilot.</li> </ol> <p>Important</p> <p>If you are using another AI Agent or an MCP Client, you need to configure the MCP server url (Production Endpoint) and set the authorization token appropriately.</p>"},{"location":"mcp-servers/devportal-mcp-hub/","title":"Customize Developer Portal as an MCP Hub","text":"<p>Bijira\u2019s developer portal is fully themeable to suit your needs. If you primarily work with MCP Servers, Bijira offers the flexibility to tailor the developer portal for a streamlined, MCP-centric experience. This curated view allows you to hide unrelated features, simplify navigation, and highlight only the tools, documentation, and Servers relevant to MCP use cases. Whether you're building integrations, exposing tools to LLMs, or managing contextual data sources, this focused setup helps reduce clutter and improves developer efficiency by surfacing only what matters most for MCP workflows.</p> <p>You can get an MCP Server only view by changing the Devportal Mode to MCP Hub through your organization's settings. Please refer this for more information.</p> <p>Info</p> <p>Bijira's MCP Inspector will be available as a testing tool in this mode.</p> <p>The default look of your MCP Hub will be as follows.</p> <p></p> <p>A themed MCP Hub could look something like the following. If you want to know more on how you can customize the devportal, please refer to our manual theming guide and theming with AI guide.</p> <p></p>"},{"location":"mcp-servers/get-started-with-mcp/","title":"Overview","text":""},{"location":"mcp-servers/get-started-with-mcp/#what-is-model-context-protocol","title":"What is Model Context Protocol?","text":"<p>MCP is a JSON-RPC\u2013based protocol designed to standardize how applications interact with large language models (LLMs). It enables sharing of contextual information\u2014such as local files, databases, or APIs\u2014with LLMs, while also allowing applications to expose tools and capabilities for AI-driven workflows and integrations.</p> <p>MCP follows a host\u2013client\u2013server architecture and supports two primary transport mechanisms: stdio and streamable HTTP. While stdio is commonly used for local communication between clients and servers on the same machine, streamable HTTP is increasingly preferred for remote connections, especially as MCP adoption grows across networked environments. </p> <p>For more information, refer to the official specification.</p>"},{"location":"mcp-servers/get-started-with-mcp/#remote-mcp-servers-with-bijira","title":"Remote MCP Servers with Bijira","text":"<p>Bijira now includes support for MCP servers. It provides a complete solution for transforming existing APIs into intelligent, AI-ready tools. With a centralized control plane, Bijira simplifies the entire lifecycle of MCP server management\u2014from creation to discovery\u2014delivering a seamless experience for both API developers and AI agent builders. Additionally, Bijira allows you to customize the developer portal to deliver a tailored, MCP-only experience for your consumers.</p> <p></p> <p>In summary, Bijira provides the following capabilities related to MCP.</p> <ol> <li>Create MCP Servers from existing API proxies or HTTP backends.</li> <li>Automatically generate the MCP tool schemas.</li> <li>Secure the MCP Servers with OAuth2 security.</li> <li>Customize the Developer portal into an MCP Hub.</li> </ol>"},{"location":"mcp-servers/get-started-with-mcp/#mcp-use-cases-with-bijira","title":"MCP Use Cases with Bijira","text":"<ul> <li>Design and Publish MCP Servers for your APIs</li> <li>Customize the Developer Portal to an MCP Hub</li> </ul>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/","title":"Integrate Bijira with Moesif","text":"<p>Moesif is an API analytics and monetization service that helps you grow your API products. You can integrate Bijira with Moesif and gain valuable insights into your API's usage.  While Moesif's API analytics capabilities empower you to make informed decision-making on behalf of your organization, its monetization options simplify revenue generation from your APIs, eliminating the need for complex coding. </p> <p>In this guide, you will:</p> <ul> <li>Generate a key in Moesif.</li> <li>Configure Bijira to connect to Moesif.</li> <li>Invoke an API and observe the insights on the Moesif dashboard. </li> </ul>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/#step-1-generate-an-api-key-in-moesif","title":"Step 1: Generate an API key in Moesif","text":"<p>Let's generate an API key in Moesif.  If you're an existing Moesif user with a registered organization, proceed to step 1.2.</p>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/#step-11-generate-a-key-in-moesif-as-a-new-user","title":"Step 1.1: Generate a key in Moesif as a new user","text":"<p>If you are a new user, follow the steps below to register an organization and generate a key:</p> <ol> <li>Go to https://www.moesif.com/.</li> <li>Click Sign Up and select an authentication option and proceed. </li> <li> <p>On the Get Started page, enter meaningful values for the fields and create a new organization. </p> Field Description Organization Name The name of your company or team. Application Name The name of your application that represents one project or environment. </li> <li> <p>Click Next.</p> </li> <li> <p>On the Overview page, click Next.</p> <p>This opens the Quick Install page. As there is no data, you cannot proceed. Let's configure Moesif to receive data from Bijira. </p> </li> <li> <p>Select a WSO2 Choreo as the Server Integration</p> </li> <li> <p>Copy the Application Id. </p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/#step-12-access-the-api-key-in-moesif-as-an-existing-user","title":"Step 1.2: Access the API key in Moesif as an existing user","text":"<p>If you are an existing user with a registered organization, or you do not have an API key for the organization you created,  follow the steps below to access the generated API key:</p> <ol> <li>Go to https://www.moesif.com/.</li> <li>Click on your profile in the bottom left corner, and navigate to the API Keys page.</li> <li>Copy the Collection Application Id.</li> </ol>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/#step-2-integrate-bijira-with-moesif","title":"Step 2: Integrate Bijira with Moesif","text":"<p>Let's configure Bijira to publish events to Moesif.</p> <ol> <li>Go to Bijira Console and sign in.</li> <li>In the left navigation, click Admin and then click Settings. </li> <li>In the header, click the Organization list. This will open the organization level settings page. </li> <li>Click Moesif Dashboard.</li> <li>Select the environment you want to publish data for.</li> <li>Paste the Application Id you copied. </li> <li>Click Add.</li> </ol> <p>Once you successfully add the key, you will see a delete option next to it. Currently, you can only configure one API key. If you need to add a new API key, you need to delete the existing key and add the new one. </p> <p>Note</p> <p>Once you configure the Moesif API key on Bijira, wait for five minutes before you publish any data to the Moesif API analytics platform. </p>"},{"location":"monitoring-and-insights/integrate-bijira-with-moesif/#step-3-invoke-an-api-and-observe-the-data-on-the-moesif-dashboard","title":"Step 3: Invoke an API and observe the data on the Moesif Dashboard","text":"<p>You have configured Bijira to publish data to Moesif. Let's see how you can view the insights on Moesif.</p> <p>Tip</p> <ul> <li>If you have not created an API and deployed it on Bijira, you can follow the Quick Start Guide to get started.</li> </ul> <ol> <li> <p>Invoke your API by following the Test REST Endpoints via the OpenAPI Console guide. </p> </li> <li> <p>Once you publish data, your Moesif dashboard will receive events. Once Moesif receives events, you will see a notification on Moesif confirming that it received data. </p> <p></p> </li> <li> <p>Click Next on the notification. This will take you to the final step, where you can opt to add team members. In this guide, let's skip this step. </p> </li> <li>Click Finish.</li> </ol> <p>You can now view your API's insights in the Moesif dashboard.</p>"},{"location":"samples/samples-overview/","title":"Samples Overview","text":"<p>Bijira provides an extensive collection of samples for a wide range of use cases. You can quickly deploy and explore these samples to easily understand the core functionalities of the platform.</p>"},{"location":"samples/samples-overview/#prerequisites","title":"Prerequisites","text":"<p>Before you use the samples, complete the following steps:</p> <ul> <li> <p>If you're signing in for the first time, follow these steps to create an organization and then create a project:</p> <ol> <li>Go to the Bijira Console and sign in using your Google, GitHub, Microsoft, Enterprise ID, or Email.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create. This creates an organization and takes you to its Overview page.</li> <li>On the organization home page, click + Create Project (Default project will be created automatically).</li> <li>Enter a display name, unique name, and description for the project.</li> <li>Click Create. This creates the project and takes you to its Overview page.</li> </ol> </li> </ul>"},{"location":"samples/samples-overview/#explore-the-bijira-samples-collection","title":"Explore the Bijira samples collection","text":"<p>You can filter and explore Bijira's sample collection based on your preference.</p> <p>To view available samples, follow these steps:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>In the Bijira Console header, go to the Project list and select your project to open its Overview page.</li> <li>On the project Overview page, click on Create.</li> <li>In Create a New API Proxy view, navigate to Try a Sample tab.</li> </ol> <p>When you view all samples, you can filter and search for samples by the following criteria:</p> <ul> <li>Buildpack: Filters by the technology used. For example, Ballerina, NodeJS, Docker, etc.</li> <li>Component Type: Filters by the component type. For example, service, web application, scheduled tasks, manual tasks, etc.</li> <li>Tags: Use tags like REST, HTTP, or GraphQL to find samples with specific functionalities or integrations.</li> </ul> <p>You can access its source code on GitHub, which contains the necessary instructions to deploy and test the sample.</p>"},{"location":"test-api-proxy/api-chat/","title":"Test APIs with Bijira API Chat","text":"<p>Testing APIs is an essential step in the API development process. Bijira simplifies the testing task by allowing you to engage with your APIs using natural language through Bijira API Chat. It eliminates manual test scenario creation and JSON payload accuracy concerns. It enables easy API communication using human language and requires no coding for handling sequences with multiple resource calls. This makes your API testing efficient and user-friendly.</p> <p>Info</p> <p>This feature is available for REST API Proxy components and Service components with REST endpoints.</p> <p>Follow the steps below to test an API with API Chat:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and API which you want to test.</li> <li>On the left navigation, click Test and then click API Chat. This opens the API Chat pane.</li> <li> <p>You can enter your query in natural language and execute it. For example, if you have a resource like <code>POST /books</code> and <code>GET /books</code>, you can input the following query and execute it to obtain results.     <pre><code>\"Add a new book titled 'The Hobbit' by 'J. R. R. Tolkien' to the reading list and verify if it was successfully added.\" \n</code></pre> The resources are executed sequentially based on your query. Alternatively, you can use the sample queries available to try out API Chat.</p> <p></p> </li> </ol>"},{"location":"test-api-proxy/curl/","title":"Test APIs with cURL","text":"<p>Testing APIs is an essential step in the API development process. Bijira simplifies the testing task by allowing you to use cURL commands generated by Bijira.</p> <p>You can follow the steps below to generate a cURL command and test your API method:</p> <ol> <li>Sign in to the Bijira Console.</li> <li>Select the project and API which you want to test.</li> <li>Click Test in the left navigation menu and then click cURL. This opens the cURL pane.</li> <li>In the cURL pane, select the environment from the drop-down list.</li> <li>Select an appropriate HTTP method from the Method list.</li> <li>Click the Parameters tab and add the necessary parameters for the API method.</li> <li>Click the Headers tab and add the required header values.</li> <li>Click the Body tab and select the message body type to invoke the API method.</li> <li>Copy the generated cURL command.</li> <li>Use the copied cURL command via a cURL client to test your API method.</li> </ol>"},{"location":"test-api-proxy/openapi-console/","title":"Test REST Endpoints via the OpenAPI Console","text":"<p>Bijira offers an integrated OpenAPI Console to test REST endpoints for the API proxies you create and deploy. Since Bijira secures REST APIs with OAuth 2.0 authentication, the OpenAPI Console generates test keys to help you test your APIs.</p> <p>Follow these steps to test a REST endpoint using the OpenAPI Console:</p> <ol> <li>Go to the Bijira Console and log in.</li> <li>Select the project and API which you want to test.</li> <li>Click Test in the left navigation menu, then select Console. This will open the OpenAPI Console pane.</li> <li> <p>In the OpenAPI Console pane, select the desired environment from the drop-down menu.</p> <p></p> </li> <li> <p>Expand the resource you want to test.</p> </li> <li>Click the Try it out button to enable testing.</li> <li>Provide values for any parameters, if applicable.</li> <li> <p>Click Execute. The response will be displayed under the Responses section.</p> <p></p> </li> </ol>"},{"location":"tutorials/expose-a-service-as-a-managed-api/","title":"Expose a Service as a Managed API","text":"<p>Bijira simplifies securely exposing existing services as managed APIs. It also allows you to manage all aspects of an API's lifecycle, security, throttling, and governance, so you can focus on service development.</p> <p>In this tutorial, you will use Bijira to expose a service as an API proxy and publish it to the Bijira Developer Portal for application developers to consume.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-1-create-an-api-proxy","title":"Step 1: Create an API proxy","text":"<p>You can create an API proxy by following several methods. In this guide, you will create an API proxy by providing a sample URL.</p> <ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>If you already have one or more API Proxies in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Import API Proxy card.</li> <li>In the Create API Proxy from Contract pane, click Try with sample URL.</li> <li>Click Next.</li> <li> <p>Update the populated API proxy details with the following values:</p> <p>Info</p> <p>The Identifier field must be unique and cannot be changed after creation.</p> Field Value Name <code>Reading List API</code> Identifier <code>reading-list-api-qs</code> Base Path <code>/apim-p/reading-list-api-qs/v1.0</code> Version <code>1.0</code> Target <code>https://apis.bijira.dev/samples/reading-list-api-service/v1.0</code> Access Mode External: API is publicly accessible </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>To see the resources of the API proxy, go to the left navigation menu, click Develop, and then click Resources.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-2-deploy-the-api-proxy","title":"Step 2: Deploy the API proxy","text":"<p>By default, the API will be automatically deployed to the development environment. But you can manually deploy it to the development as well with required changes. To do So, follow these steps:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Build Area card, click Deploy.</li> </ol> <p>Additionally, you can click the down arrow next to Deploy and select Configure and Deploy to make any necessary changes before deploying the API proxy.</p> <p>Once the deployment is complete, the Development card indicates the Deployment Status as Active.</p> <p>Now you are ready to test the API proxy.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-3-test-the-api-proxy","title":"Step 3: Test the API proxy","text":"<p>You can test the API proxy in the development environment before promoting it to production. Bijira provides the following options to test your API proxy:</p> <ul> <li>Console</li> <li>cURL</li> <li>API Chat</li> </ul> <p>In this guide, you will use the OpenAPI Console.</p> <ol> <li> <p>In the left navigation menu, click Test and then click Console.</p> <p>Tip</p> <p>Since the API proxy is secured when deployed, you will need a key to invoke it. Bijira automatically generates a key when you navigate to the Console pane.</p> </li> <li> <p>In the Console pane, select Development from the environment drop-down list.</p> </li> <li>Expand the <code>GET /books</code> method and click Try it Out to test it.</li> <li>Click Execute. You will see a response similar to the following:</li> </ol> <p></p> <p>This indicates that your API proxy is working as expected.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-4-promote-the-api-proxy-to-production","title":"Step 4: Promote the API proxy to production","text":"<p>Once you verify that the API proxy is working as expected in the development environment, you can promote it to production.</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Development card, click Promote.</li> <li> <p>In the Configure &amp; Deploy pane, click Next.</p> <p>Tip</p> <p>If you want to specify a different endpoint for your production environment, you can make the change in the Configure &amp; Deploy pane.</p> <p>The Production card indicates the Deployment Status as Active when the API proxy is successfully deployed to production.</p> <p>If you want to verify that the API proxy is working as expected in production, you can test the API in the production environment.</p> </li> </ol> <p>Now that your API is deployed in both development and production environments and can be invoked, the next step is to publish it so that consumers can discover and subscribe to it.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-5-publish-the-api-proxy","title":"Step 5: Publish the API proxy","text":"<ol> <li>In the left navigation menu, click Develop and then click Lifecycle. This opens the Lifecycle page, where you can see the different lifecycle stages of the API. The current lifecycle stage is Created.</li> <li>Click Publish.</li> <li>In the Publish API dialog, click Confirm to proceed with publishing the API with the specified display name. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol> <p>You can observe that the API lifecycle stage has changed to Published. Now the API is available for consumption. API consumers can consume the API via the Bijira Developer Portal.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-6-invoke-the-api","title":"Step 6: Invoke the API","text":"<p>To generate credentials for the published API and invoke it via the Developer Portal, follow these steps:</p> <ol> <li>In the Lifecycle Management pane, click Go to DevPortal. This takes you to the Petstore API published to the Bijira Developer Portal.</li> <li>Generate credentials:<ol> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li>Click Generate Credentials. Bijira generates new tokens and populates the Consumer Key and Consumer Secret fields.</li> </ol> </li> <li>Invoke the API:<ol> <li>In the Developer Portal left navigation menu, click Try Out.</li> <li>In the Endpoint list, select Development as the environment to try out the API.</li> <li>Click Get Test Key. This generates an access token.</li> <li>Expand the <code>GET /pet/findByStatus</code> operation and click Try it out.</li> <li>Select available as the status and click Execute.</li> </ol> </li> </ol> <p>Now you have successfully created, deployed, tested, and published an API proxy using Bijira.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/","title":"Secure an API with Role-Based Access Control","text":"<p>Role-based access control (RBAC) is a flexible and scalable approach to manage access to API resources. In this approach, each user or group is assigned a specific role that determines the permissions granted to perform operations on an API resource.</p> <p>This tutorial explains how to implement RBAC using Bijira. It includes a real-world scenario with instructions to create and publish an API proxy component in Bijira and apply role-based access control.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#scenario","title":"Scenario","text":"<p>An organization needs to implement a user management service to keep track of users. The service needs to perform the following operations:</p> <ul> <li>List existing users</li> <li>List a specific user</li> <li>Create new users</li> <li>Delete a user</li> </ul> <p>There are two types of users in the organization:</p> <ul> <li>Human resource manager (HR manager): Can perform all operations (list users, list a user, create users, and delete a user).</li> <li>Human resource officer (HR officer): Can only list existing users and list a specific user.</li> </ul>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#implement-role-based-access-control-with-bijira","title":"Implement role-based access control with Bijira","text":"<p>Let\u2019s take a look at the steps to implement the scenario described above using Choreo and Asgardeo.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you're signing in to the Bijira Console for the first time, create an organization:<ol> <li>Go to Bijira Console and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> </li> </ul> <p>This creates the organization and opens the Project Home page of the default project created for you.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-1-create-an-api-proxy-component-and-deploy-it","title":"Step 1: Create an API proxy component and deploy it","text":"<ol> <li>Go to Bijira Console and sign in. This opens the project home page.</li> <li>To create an API proxy component, follow the instructions in Start with Endpoint.</li> <li>In the left navigation menu, click Policy.</li> <li>Click the + in the API Proxy Contract and replace the resources with following.<ul> <li>GET <code>/users</code></li> <li>GET <code>/users/{userID}</code></li> <li>POST <code>/users</code></li> <li>DELETE <code>/users/{userID}</code></li> </ul> </li> <li>In the left navigation menu, click Deploy.</li> <li>Go to the Build Area card and click Configure &amp; Deploy.</li> <li>In the Configure API Access Mode pane, select External to make the API publicly accessible.</li> <li>Click Deploy.</li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-2-apply-permissions-to-resources-and-publish-the-api","title":"Step 2: Apply permissions to resources and publish the API","text":"<ol> <li>On the Deploy page, go to the Build Area card and click Security Settings.</li> <li>In the Security Settings pane, go to the Permissions List section and click + Add Permission(Scope).</li> <li>Add the following permission values:<ul> <li><code>get_user_list</code></li> <li><code>get_user</code></li> <li><code>create_user</code></li> <li><code>delete_user</code></li> </ul> </li> <li> <p>In the Permissions section, assign permissions to resources as follows:</p> Resource Permission GET /users <code>get_user_list</code> GET /users/{userID} <code>get_user</code> POST /users <code>create_user</code> DELETE /users/{userID} <code>delete_user</code> </li> <li> <p>Click Apply.</p> </li> <li>Redeploy the API to apply the latest permissions:<ol> <li>Go to the Build Area card and click Configure &amp; Deploy.</li> <li>Select External as the access mode and click Deploy.</li> </ol> </li> <li>Promote the API to production:<ol> <li>In the left navigation menu, click Deploy.</li> <li>Go to the Development card and click Promote.</li> <li>In the Configure &amp; Deploy pane, click Next to promote the API to production.</li> </ol> </li> <li>Publish the API:<ol> <li>In the left navigation menu, click Lifecycle.</li> <li>In the Lifecycle Management pane, click Publish. This changes the API status to Published.</li> </ol> </li> </ol> <p>Now, application developers can discover the API, subscribe to it, and invoke it.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-3-subscribe-to-the-published-api","title":"Step 3: Subscribe to the published API","text":"<ol> <li>Go to the API Developer Portal and click Applications on the top menu.</li> <li>Click +Create.</li> <li>Enter <code>User Management App</code> as the Application Name and click Create.</li> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li>Expand Advanced Configurations and:<ol> <li>Select Code as the grant type.</li> <li>Enter the hosted URL of the application as the Callback URL.</li> <li>Click Generate Credentials.</li> </ol> </li> <li>Subscribe to the API:<ol> <li>In the Developer Portal left navigation menu, click Subscriptions.</li> <li>In the Subscription Management pane, click Add APIs.</li> <li>In the Add APIs list, go to the API you created and click Add.</li> </ol> </li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-4-define-roles-and-assign-them-to-groups","title":"Step 4: Define roles and assign them to groups","text":"<ol> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li>In the Permissions section, click Manage Permissions. This takes you to the Roles tab of the <code>User Management App</code> application in Asgardeo.</li> <li>Add the following roles:<ul> <li>admin: Assign permissions <code>get_user_list</code>, <code>get_user</code>, <code>create_user</code>, and <code>delete_user</code>.</li> <li>user: Assign permissions <code>get_user_list</code> and <code>get_user</code>.</li> </ul> </li> <li>Create groups and assign roles:<ul> <li>HR-Manager: Assign the admin role.</li> <li>HR-Officer: Assign the user role.</li> </ul> </li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-5-define-users-and-assign-them-to-groups","title":"Step 5: Define users and assign them to groups","text":"<ol> <li>Define two users: <code>Cameron</code> and <code>Alex</code>. For instructions, see Manage Users in the Asgardeo documentation.</li> <li>Assign <code>Cameron</code> to the HR-Manager group and <code>Alex</code> to the HR-Officer group. For instructions, see Assign Groups.</li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-6-obtain-an-access-token-and-try-out-the-api","title":"Step 6: Obtain an access token and try out the API","text":"<ol> <li> <p>Construct the authorization URL as follows:</p> <pre><code>&lt;authorize_URL&gt;?response_type=code&amp;client_id=&lt;clientID&gt;&amp;redirect_uri=&lt;redirect_URL&gt;&amp;scope=&lt;scopes&gt;\n</code></pre> <ul> <li>Replace <code>&lt;authorize_URL&gt;</code> with the Authorize Endpoint URL.</li> <li>Replace <code>&lt;redirect_URL&gt;</code> with the Callback URL.</li> <li>Replace <code>&lt;scopes&gt;</code> with the applicable permissions (e.g., <code>get_user_list get_user</code> for <code>Alex</code>).</li> <li>Replace <code>&lt;clientID&gt;</code> with the Consumer Key.</li> </ul> </li> <li> <p>Open the constructed URL in a web browser and sign in with <code>Alex</code>'s credentials. Click Allow to approve the consent.</p> </li> <li> <p>Copy the code from the callback URL and use it to replace <code>&lt;code&gt;</code> in the following cURL command:</p> <pre><code>curl &lt;token_url&gt; -d \"grant_type=authorization_code&amp;code=&lt;code&gt;&amp;redirect_uri=&lt;redirect_uri&gt;\" -H \"Authorization: Basic &lt;base64(clientId:clientSecret)&gt;\"\n</code></pre> <ul> <li>Replace <code>&lt;token_url&gt;</code> with the Token Endpoint URL.</li> <li>Replace <code>&lt;redirect_uri&gt;</code> with the Callback URL.</li> <li>Replace <code>&lt;base64(clientId:clientSecret)&gt;</code> with the Base64-encoded value of <code>clientId:clientSecret</code>.</li> </ul> </li> <li> <p>Extract the access token from the response.</p> </li> <li> <p>Go to the API Developer Portal and try out the API using the access token. Observe that <code>Alex</code> can only access the following resources:</p> <ul> <li>GET /users</li> <li>GET /users/{userID}</li> </ul> <p>Attempting to access other resources will result in a scope validation error.</p> <p>Similarly, if you use <code>Cameron</code>'s credentials, you can access all four resources because the token includes all required permissions.</p> </li> </ol> <p>Now you have gained hands-on experience in implementing role-based access control with Choreo and Asgardeo.</p>"}]}